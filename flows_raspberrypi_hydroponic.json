[
    {
        "id": "1d22c714.e50369",
        "type": "tab",
        "label": "GET Telemetry",
        "disabled": false,
        "info": ""
    },
    {
        "id": "87cb301d.9893c",
        "type": "tab",
        "label": "POST ",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5127740.f28848c",
        "type": "tab",
        "label": "System rules",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9441712c.a6198",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5e9d2991.0ea428",
        "type": "tab",
        "label": "Crops management",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b2dec5c2.4f2758",
        "type": "tab",
        "label": "Home",
        "disabled": false,
        "info": ""
    },
    {
        "id": "90cba974.1b70f8",
        "type": "group",
        "z": "b2dec5c2.4f2758",
        "name": "Execute scene",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "64af5848.7dd3f8",
            "e70c7826.ead9f8",
            "a4ea3e4e.edd54",
            "487a2017.f0152"
        ],
        "x": 1304,
        "y": 1599,
        "w": 872,
        "h": 82
    },
    {
        "id": "ad64f484.3bd408",
        "type": "group",
        "z": "b2dec5c2.4f2758",
        "name": "Control Bot",
        "style": {
            "stroke": "#777777",
            "fill": "#ffffff",
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "3cb22fb4.1c60d",
            "9bd57614.6bf608",
            "bb4b8438.9dd088",
            "1f156a7f.f7faf6",
            "d2a78cee.1fb97",
            "8518d691.cf94f8"
        ],
        "x": 1304,
        "y": 799,
        "w": 792,
        "h": 162
    },
    {
        "id": "82beadaa.80f9a",
        "type": "group",
        "z": "b2dec5c2.4f2758",
        "name": "Control Curtain",
        "style": {
            "stroke": "#777777",
            "fill": "#ffffff",
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "c2fe958a.eedbe8",
            "b5c777eb.591838",
            "a96301bd.0c4dd",
            "30bba459.0efd3c",
            "c98498a0.ef5ea8",
            "18996bc4.33bdb4",
            "e274d666.f02638"
        ],
        "x": 1304,
        "y": 1019,
        "w": 792,
        "h": 222
    },
    {
        "id": "98e346c4.842908",
        "type": "group",
        "z": "b2dec5c2.4f2758",
        "name": "Get Devices",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "c46b3d7e.34b62",
            "b92e57cb.92d5a8",
            "cee02e4.49bfad",
            "af637338.5ccc6",
            "8d660f51.a75cf",
            "5d50c8ff.4dfa98"
        ],
        "x": 244,
        "y": 859,
        "w": 852,
        "h": 122
    },
    {
        "id": "e4c51a6a.02a678",
        "type": "group",
        "z": "b2dec5c2.4f2758",
        "name": "Get Scenes",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "841fa47b.903488",
            "34a7b2a9.c5d22e",
            "f3a44e86.445bb",
            "e34e8e48.b6d52",
            "3882a851.983ef8"
        ],
        "x": 244,
        "y": 1019,
        "w": 852,
        "h": 122
    },
    {
        "id": "2b4d53e1.d6e2cc",
        "type": "group",
        "z": "b2dec5c2.4f2758",
        "name": "Get Status",
        "style": {
            "stroke": "#777777",
            "fill": "#ffffff",
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "fdf6b7dc.749448",
            "352d13c7.f80c1c",
            "3bfce5e7.124e4a",
            "9d34c528.2d33f8"
        ],
        "x": 254,
        "y": 1179,
        "w": 772,
        "h": 82
    },
    {
        "id": "955cda67.93f6e8",
        "type": "group",
        "z": "b2dec5c2.4f2758",
        "name": "Control IR",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "f34949f6.4f5bf8",
            "e6eadb02.180c68",
            "d3b26d8c.5038b",
            "c8a9c695.2f5788",
            "be5bfc4f.6cdd8",
            "d7959315.ce8da",
            "caa373a3.3259a"
        ],
        "x": 314,
        "y": 1279,
        "w": 772,
        "h": 242
    },
    {
        "id": "8e57852f.2718a8",
        "type": "group",
        "z": "5127740.f28848c",
        "name": "Water pump - stop when water level > 50",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3db55298.70f37e",
            "d5c862b.d3e0ba",
            "6bd46816.3f5cd8"
        ],
        "x": 94,
        "y": 599,
        "w": 722,
        "h": 82
    },
    {
        "id": "3cd27958.a703b6",
        "type": "group",
        "z": "5127740.f28848c",
        "name": "Nutrients - Adjust and warning when reaching threshold",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "fill-opacity": "0.75",
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "5d9dc44f.a6cccc",
            "78ee2d93.0854e4",
            "6b31749d.19ee4c",
            "7ebdaedb.473e9",
            "7485b5.c5f5ca4c",
            "23810c02.07fa14",
            "4a15ab80.153564"
        ],
        "x": 76,
        "y": 365,
        "w": 1130,
        "h": 196
    },
    {
        "id": "9735f20b.9f01e",
        "type": "group",
        "z": "5127740.f28848c",
        "name": "PH - Adjust PH and warning when reaching threshold",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3e247b14.95d3a4",
            "8fd06c84.9d955",
            "1b07e4d1.7c4d9b",
            "f3e2c3ad.8ebb2",
            "4c00e295.9a2f5c",
            "f76a168.49897e8"
        ],
        "x": 74,
        "y": 59,
        "w": 1072,
        "h": 222
    },
    {
        "id": "9c4443bb.0420a",
        "type": "group",
        "z": "1d22c714.e50369",
        "name": "UI Header - links",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6921fbdb.48e634",
            "27f25225.1ccc9e",
            "4966b810.210668",
            "c142bf5f.eb819",
            "ccfb9c89.f2c45",
            "85c3e511.6fbc68"
        ],
        "x": 114,
        "y": 99,
        "w": 532,
        "h": 202
    },
    {
        "id": "cdba4a8d.9d7c08",
        "type": "group",
        "z": "1d22c714.e50369",
        "name": "Weather forecast and sunrise/sunset",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "85c1ae45.14716",
            "c8db48f7.af9608",
            "f376d3a0.9a725",
            "fe79ff8b.aa786",
            "a887c10.0424b4",
            "45293d1e.aedc04",
            "b8c07479.ab99c8",
            "509eb66d.0f6d88",
            "75f934f.744b2cc",
            "c9cadf3c.4dd91",
            "a77336d4.24c878",
            "ffd2dd.8b18ad2",
            "ebeb7e6d.61e6c",
            "6c1d8e8.c6bf77",
            "15bc06eb.0cde59",
            "f9da79c2.9a6128"
        ],
        "x": 714,
        "y": 99,
        "w": 1142,
        "h": 322
    },
    {
        "id": "c2cc2f7f.c6192",
        "type": "group",
        "z": "1d22c714.e50369",
        "name": "Water quality - PPM",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "39bf6628.85f8ba",
            "fff065af.0a0958",
            "eb66256c.111fa8",
            "6a5ac7a1.e350c8",
            "7fe995e5.477afc",
            "f8fee95.2171618",
            "63de4a5e.7c19a4",
            "383c0ad2.b2e656",
            "b2d124cc.ae5b18",
            "dbbbfdb2.44fe2",
            "34a30d8d.5cf552",
            "1de17954.4d8a97",
            "c21651f8.1777",
            "839e7131.1b0c9",
            "f22d3547.8edd78"
        ],
        "x": 94,
        "y": 453,
        "w": 1672,
        "h": 228
    },
    {
        "id": "ca2296d8.64fa18",
        "type": "group",
        "z": "1d22c714.e50369",
        "name": "Telemetry - get DHT11 temperature and humidity",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e88e5d3f.13895",
            "62bc488f.b3dd18",
            "7023be29.a8b",
            "1e6d501a.c6f28",
            "5914ecc9.808654",
            "b5c12285.51ca3",
            "f3b265b2.271218",
            "c2314fab.6c8af",
            "9b1656b1.099d08",
            "a2c963c.a4756a",
            "1c83a03b.a169c"
        ],
        "x": 134,
        "y": 1479,
        "w": 1432,
        "h": 262
    },
    {
        "id": "a0e631b8.d383b",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "8193652c.e6bda8",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "hydro",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "352c089f.6b44d8",
        "type": "ui_tab",
        "name": "Hydroponic",
        "icon": "fa-tachometer",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f0e58282.f2736",
        "type": "ui_group",
        "name": "Camera",
        "tab": "352c089f.6b44d8",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false,
        "info": "# Seed tray LEDs"
    },
    {
        "id": "8a9b009f.1b35d",
        "type": "ui_group",
        "name": "Sensors",
        "tab": "352c089f.6b44d8",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "65d119b5.66cb78",
        "type": "ui_group",
        "name": "PH",
        "tab": "352c089f.6b44d8",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "1c37dc0b.ce28e4",
        "type": "ui_group",
        "name": "Weather forecast",
        "tab": "352c089f.6b44d8",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "72b67add.961f74",
        "type": "ui_group",
        "name": "Schedules",
        "tab": "352c089f.6b44d8",
        "order": 9,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "e8854cf5.bbc99",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "8abb8d14.1da7c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "c9f3a157.d0af7",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "e5be2d4e.0683",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 7,
        "height": 1
    },
    {
        "id": "c9066fca.cee52",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 7,
        "height": 1
    },
    {
        "id": "2ee23605.85e39a",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 7,
        "height": 1
    },
    {
        "id": "cf3c4bd4.b57d78",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 7,
        "height": 1
    },
    {
        "id": "d3290ae7.21fe98",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "2de4a264.b5f62e",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "60a0073d.7b0198",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "6dc911ee.ea694",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "27ff61b6.64ceee",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "d68d5539.9f7388",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "25301e7.4048be2",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 7,
        "height": 1
    },
    {
        "id": "4e20bf36.aee24",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 7,
        "height": 1
    },
    {
        "id": "cd177d02.fcb47",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 7,
        "height": 1
    },
    {
        "id": "55e06fae.59f7f",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 7,
        "height": 1
    },
    {
        "id": "d04eaa91.a399f8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "39ffd0d.5f55a3",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "d50ed20d.eaca2",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "f8e5458c.a3e458",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "2e5354b4.fa9efc",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "55451708.9195b8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "8a9743e3.77e45",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "cd7c0825.8eea08",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 7,
        "height": 1
    },
    {
        "id": "b116a7ee.4a8928",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "ac904da2.49289",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "d031979b.9eb4d8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "d7b17763.6bfd98",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#1dba08",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "Hydroponic",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "none",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 12,
                "gy": 12,
                "cx": 0,
                "cy": 0,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8d4aab9b.4d6328",
        "type": "ui_group",
        "name": "Nutrients",
        "tab": "352c089f.6b44d8",
        "order": 6,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "c9b3db5b.545828",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "bdf4ab4f.fa8958",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "817f3f37.e3851",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "bdf4ab4f.fa8958",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "f0e56970.626d48",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "bdf4ab4f.fa8958",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "c33dc565.8c19d8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "bdf4ab4f.fa8958",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "f4cafd8e.2fc58",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "bdf4ab4f.fa8958",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "217cc961.603ce6",
        "type": "persist-store",
        "filename": "/home/pi/.node-red/projects/hydro/persistence.json",
        "interval": "60"
    },
    {
        "id": "45199dde.854f64",
        "type": "ui_group",
        "name": "Light",
        "tab": "352c089f.6b44d8",
        "order": 7,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "6c15eb0d.8f5814",
        "type": "ui_group",
        "name": "Water",
        "tab": "352c089f.6b44d8",
        "order": 8,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "fc40ab90.fee1e8",
        "type": "ui_group",
        "name": "Graph",
        "tab": "f0cf9f07.0cff7",
        "order": 9,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "8073017c.fb41a",
        "type": "ui_tab",
        "name": "Setting",
        "icon": "fa-sliders",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f0cf9f07.0cff7",
        "type": "ui_tab",
        "name": "Graph",
        "icon": "fa-area-chart",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ad78e894.23e758",
        "type": "ui_tab",
        "name": "Schedule",
        "icon": "fa-calendar",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1c4b8cb2.e1e2e3",
        "type": "ui_group",
        "name": "Hydroponic",
        "tab": "8073017c.fb41a",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "c3776e2a.f6068",
        "type": "ui_group",
        "name": "Crops management",
        "tab": "8073017c.fb41a",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false
    },
    {
        "id": "ab41d620.ef2698",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "ae81cad0.1d5098",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "d3dfe742.cc7d78",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "ae81cad0.1d5098",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "fd976d0a.1528b",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "ae81cad0.1d5098",
        "order": 6,
        "width": 4,
        "height": 1
    },
    {
        "id": "97fc29b5.9cfb68",
        "type": "ui_group",
        "name": "Nutrient Film Technique (NFT) ",
        "tab": "ad78e894.23e758",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false
    },
    {
        "id": "780009a1.cfbb18",
        "type": "ui_group",
        "name": "My activities",
        "tab": "352c089f.6b44d8",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "b014bc36.c80c9",
        "type": "ui_group",
        "name": "Seed tray",
        "tab": "ad78e894.23e758",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "2a85ce84.fe1902",
        "type": "ui_group",
        "name": "Seed Tray - List seedlings",
        "tab": "ad78e894.23e758",
        "order": 3,
        "disp": true,
        "width": 10,
        "collapse": false
    },
    {
        "id": "661a710f.63355",
        "type": "persist-store",
        "filename": "/home/pi/.node-red/projects/hydro/cropsState.jsonpersistence.json",
        "interval": "60"
    },
    {
        "id": "4a4c281c.1c1c58",
        "type": "ui_group",
        "name": "NFT - List of crops",
        "tab": "ad78e894.23e758",
        "order": 4,
        "disp": true,
        "width": 8,
        "collapse": false
    },
    {
        "id": "1f4c7449.f8fcdc",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "7cfe8ffe.fc5dd",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "cec3cd5b.134a8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "18162955.3e4f87",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "47752723.f9db58",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "63cb2a79.ec4c24",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "47c39ec7.b3401",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "e6f97585.fcacd8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 14,
        "width": 2,
        "height": 1
    },
    {
        "id": "8f867e5d.ea04f",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "f8ec7723.2da448",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 19,
        "width": 2,
        "height": 1
    },
    {
        "id": "3ee94c93.c81374",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "f7bea863.802308",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 23,
        "width": 2,
        "height": 1
    },
    {
        "id": "eb820245.bf824",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "a47962d.ec1cba",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 28,
        "width": 2,
        "height": 1
    },
    {
        "id": "e6fb040e.96c5f8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 30,
        "width": 1,
        "height": 1
    },
    {
        "id": "72fdc73d.0f4928",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 33,
        "width": 2,
        "height": 1
    },
    {
        "id": "2e83b975.dbdcf6",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 35,
        "width": 1,
        "height": 1
    },
    {
        "id": "c555eb32.9220a8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c4b8cb2.e1e2e3",
        "order": 37,
        "width": 2,
        "height": 1
    },
    {
        "id": "bea636ab.217c28",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c3776e2a.f6068",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "d7a35f58.c9dac",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c3776e2a.f6068",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "8e33c9ce.def548",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c3776e2a.f6068",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "96d9379e.fc4288",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c3776e2a.f6068",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "d346cd97.85385",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c3776e2a.f6068",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "81370f89.d077e",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c3776e2a.f6068",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "feb8425d.ff4b4",
        "type": "apple-find-me-account",
        "name": "Baptiste apple account",
        "showfmly": true
    },
    {
        "id": "b134136b.490ed",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c37dc0b.ce28e4",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "a0810ae.0335ff8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1c37dc0b.ce28e4",
        "order": 10,
        "width": 9,
        "height": 1
    },
    {
        "id": "caaf34e3.5c2638",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8a9b009f.1b35d",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "a75a5cd0.52d76",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8a9b009f.1b35d",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "62b98d8.b760b74",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8a9b009f.1b35d",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "3808d133.ba824e",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8a9b009f.1b35d",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "d14031de.f58e1",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8a9b009f.1b35d",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "1497affc.a9df5",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8a9b009f.1b35d",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "7a032780.2fb438",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8a9b009f.1b35d",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "f1db0f3e.ad86c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8a9b009f.1b35d",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "337fc372.1bddfc",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8a9b009f.1b35d",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "51034f27.fec11",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8a9b009f.1b35d",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "c6ce0749.9ea658",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "65d119b5.66cb78",
        "order": 1,
        "width": 4,
        "height": 1
    },
    {
        "id": "1d7c3516.44f11b",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "65d119b5.66cb78",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "49a5b524.e62f8c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "65d119b5.66cb78",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "da4c931d.50261",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "65d119b5.66cb78",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "c1c550a4.96b96",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8d4aab9b.4d6328",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "8d60f12e.451dd",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8d4aab9b.4d6328",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "bfefe7e6.d4d048",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8d4aab9b.4d6328",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "457044f0.b9264c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8d4aab9b.4d6328",
        "order": 6,
        "width": 4,
        "height": 1
    },
    {
        "id": "cd81a86e.6f6ac8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8d4aab9b.4d6328",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "9f77122f.6dfeb",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8d4aab9b.4d6328",
        "order": 10,
        "width": 4,
        "height": 1
    },
    {
        "id": "e2fc5a91.4e5828",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8d4aab9b.4d6328",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "25c96c90.6df544",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8d4aab9b.4d6328",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "ea26ee5a.3d50b",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8d4aab9b.4d6328",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "f8ea1a6e.1314c8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "8d4aab9b.4d6328",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "dfc3a19a.3ef64",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 2,
        "width": 4,
        "height": 1
    },
    {
        "id": "33792a29.6d8bc6",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "98acfee8.93591",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "f5e29cbc.7858c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "5e02aa67.3bfaa4",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "b7b41a38.f13de8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "df1b6a6d.7c4218",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "865933de.6696a",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 14,
        "width": 4,
        "height": 1
    },
    {
        "id": "69328661.78b418",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "886112ce.8d40a",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 16,
        "width": 4,
        "height": 1
    },
    {
        "id": "bad86cb7.5c38b",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "45199dde.854f64",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "3bf07013.563dc",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "6c15eb0d.8f5814",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "b0834263.a5b97",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "6c15eb0d.8f5814",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "7645affa.f76a8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "6c15eb0d.8f5814",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "963dc4a2.6056b8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "6c15eb0d.8f5814",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "6441e109.0fb2b",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "6c15eb0d.8f5814",
        "order": 9,
        "width": 4,
        "height": 1
    },
    {
        "id": "74f5b30d.9ee94c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "6c15eb0d.8f5814",
        "order": 12,
        "width": 3,
        "height": 1
    },
    {
        "id": "abb0e976.5db578",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "6c15eb0d.8f5814",
        "order": 15,
        "width": 3,
        "height": 1
    },
    {
        "id": "b0151dde.26366",
        "type": "smartthings-config",
        "name": "Home token",
        "token": "ef2ad5f2-6f34-4f4a-adef-97bbf5fc2662"
    },
    {
        "id": "e30bc267.9a60e",
        "type": "mqtt in",
        "z": "1d22c714.e50369",
        "name": "",
        "topic": "hydro/t/seed_tray",
        "qos": "0",
        "datatype": "auto",
        "broker": "a0e631b8.d383b",
        "x": 200,
        "y": 766,
        "wires": [
            [
                "67398353.3f850c"
            ]
        ]
    },
    {
        "id": "67398353.3f850c",
        "type": "json",
        "z": "1d22c714.e50369",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 766,
        "wires": [
            [
                "4fa1702.8b2e49"
            ]
        ]
    },
    {
        "id": "4fa1702.8b2e49",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Parse telemetry JSON",
        "func": "var isWaterPumpActivated = global.get(\"settings.water_pump.activated\");\n\nvar waterQualityMsg = { \n    payload: msg.payload.s.water.ppm\n};\n\nvar waterTempMsg = { \n    payload: msg.payload.s.water.temp\n};\n\nvar waterPhMsg = { \n    payload: msg.payload.s.water.ph\n};\n\nvar waterLevelMsg = { \n    payload: msg.payload.s.water.level\n};\n\nvar luminosityMsg = { \n    payload: msg.payload.s.lux\n};\n\n// when pump is activated, PH and PPM reading are wrong \nif (isWaterPumpActivated && isWaterPumpActivated == 1) {\n    return [\n         null, \n         luminosityMsg, \n         waterTempMsg,\n         null,\n         waterLevelMsg\n    ];\n} else { \n\n    return [\n        waterQualityMsg, \n        luminosityMsg, \n        waterTempMsg,\n        waterPhMsg,\n        waterLevelMsg\n    ];\n}",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 946,
        "wires": [
            [],
            [
                "b7f7abe3.8afe58",
                "cffdb1e7.15d13",
                "ed698194.f939d"
            ],
            [
                "f9ece608.ba06e8",
                "60f91bf2.98dd04",
                "ddf60a00.0b8158",
                "cece987b.0169b8"
            ],
            [
                "e3814403.711458",
                "7d66ede7.acf094",
                "ea0e311d.857dc"
            ],
            [
                "b1c0fbbf.8e9c58",
                "ce4f2657.0c3588",
                "b8023ba0.969078",
                "a150ea22.90b8b8"
            ]
        ]
    },
    {
        "id": "acca3832.810b88",
        "type": "mqtt out",
        "z": "87cb301d.9893c",
        "name": "Lamp",
        "topic": "hydro/lamp/switch",
        "qos": "0",
        "retain": "",
        "broker": "a0e631b8.d383b",
        "x": 770,
        "y": 153,
        "wires": []
    },
    {
        "id": "3e247b14.95d3a4",
        "type": "switch",
        "z": "5127740.f28848c",
        "g": "9735f20b.9f01e",
        "name": "Mean PH greater than global MaxPH or less than global Min PH",
        "property": "payload[0].mean",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "maxPH",
                "vt": "global"
            },
            {
                "t": "lt",
                "v": "minPH",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "8fd06c84.9d955"
            ],
            [
                "f76a168.49897e8"
            ]
        ]
    },
    {
        "id": "8fd06c84.9d955",
        "type": "function",
        "z": "5127740.f28848c",
        "g": "9735f20b.9f01e",
        "name": "Pass message",
        "func": "msg.payload = \"PH too high\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 960,
        "y": 100,
        "wires": [
            [
                "f3e2c3ad.8ebb2"
            ]
        ]
    },
    {
        "id": "e88e5d3f.13895",
        "type": "delay",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 880,
        "y": 1600,
        "wires": [
            [
                "c2314fab.6c8af"
            ]
        ]
    },
    {
        "id": "39bf6628.85f8ba",
        "type": "delay",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 960,
        "y": 600,
        "wires": [
            [
                "7fe995e5.477afc",
                "f8fee95.2171618"
            ]
        ]
    },
    {
        "id": "62bc488f.b3dd18",
        "type": "mqtt in",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "name": "",
        "topic": "hydro/t/room",
        "qos": "0",
        "datatype": "auto",
        "broker": "a0e631b8.d383b",
        "x": 230,
        "y": 1600,
        "wires": [
            [
                "7023be29.a8b"
            ]
        ]
    },
    {
        "id": "7023be29.a8b",
        "type": "json",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 1600,
        "wires": [
            [
                "1e6d501a.c6f28"
            ]
        ]
    },
    {
        "id": "1e6d501a.c6f28",
        "type": "function",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "name": "Parse telemetry JSON",
        "func": "\nvar roomTemperatureMsg =  { \n        payload: msg.payload.r.t \n};\n    \nvar roomHumidityMsg = { \n    payload: msg.payload.r.h\n}; \n\nreturn [\n    roomTemperatureMsg, \n    roomHumidityMsg\n];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 1600,
        "wires": [
            [
                "b5c12285.51ca3",
                "e88e5d3f.13895",
                "9b1656b1.099d08"
            ],
            [
                "f3b265b2.271218",
                "a2c963c.a4756a"
            ]
        ]
    },
    {
        "id": "60f91bf2.98dd04",
        "type": "delay",
        "z": "1d22c714.e50369",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 760,
        "y": 986,
        "wires": [
            [
                "61e95af8.591824",
                "a34db445.a149b8"
            ]
        ]
    },
    {
        "id": "85c1ae45.14716",
        "type": "comment",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "name": "OpenWeatherMap One Call API for Weather and Forecast",
        "info": "",
        "x": 970,
        "y": 160,
        "wires": []
    },
    {
        "id": "c8db48f7.af9608",
        "type": "http request",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "name": "Get OWM data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "https://api.openweathermap.org/data/2.5/onecall",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "fe79ff8b.aa786",
                "6c1d8e8.c6bf77"
            ]
        ]
    },
    {
        "id": "f376d3a0.9a725",
        "type": "inject",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "name": "Trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7200",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 820,
        "y": 220,
        "wires": [
            [
                "a887c10.0424b4"
            ]
        ]
    },
    {
        "id": "fe79ff8b.aa786",
        "type": "function",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "name": "Format current data",
        "func": "var icon = {};\n\nvar units=flow.get('units');\nif (units===undefined)\n{\n  units=\"imperial\";\n}\n\nfunction timeConvert(UNIX_timestamp){\n  var a = new Date(UNIX_timestamp * 1000);\n  var hour = a.getHours();\n  var suffix = \" am\";\n  if (hour >= 12) {\n    hour = hour - 12;\n    suffix = \" pm\";\n  }\n  if (hour === 0) {\n    hour = 12;\n  }\n  var min = a.getMinutes();\n  if (min < 10) {min = \"0\" + min;}\n  return hour + ':' + min + suffix;\n}\n\nvar degreesToCardinal = function(deg){\nif (deg>11.25 && deg<=33.75){\nreturn \"NNE\";\n  }else if (deg>33.75 && deg<56.25){\nreturn \"NE\";\n  }else if (deg>56.25 && deg<78.75){\nreturn \"ENE\";\n  }else if (deg>78.75 && deg<101.25){\nreturn \"E\";\n  }else if (deg>101.25 && deg<123.75){\nreturn \"ESE\";\n  }else if (deg>123.75 && deg<146.25){\nreturn \"SE\";\n  }else if (deg>146.25 && deg<168.75){\nreturn \"SSE\";\n  }else if (deg>168.75 && deg<191.25){\nreturn \"S\";\n  }else if (deg>191.25 && deg<213.75){\nreturn \"SSW\";\n  }else if (deg>213.75 && deg<236.25){\nreturn \"SW\";\n  }else if (deg>236.25 && deg<258.75){\nreturn \"WSW\";\n  }else if (deg>258.75 && deg<281.25){\nreturn \"W\";\n  }else if (deg>281.25 && deg<303.75){\nreturn \"WNW\";\n  }else if (deg>303.75 && deg<326.25){\nreturn \"NW\";\n  }else if (deg>326.25 && deg<348.75){\nreturn \"NNW\";\n  }else{\nreturn \"N\"; \n  }\n}\n\nif (units == \"imperial\")\n{\n  msg.payload.current.temp = msg.payload.current.temp.toFixed() + ' °F';\n  msg.payload.current.wind_speed = msg.payload.current.wind_speed.toFixed() + ' mph';\n}\nelse // metric units\n{\n  msg.payload.current.temp = msg.payload.current.temp.toFixed(1) + ' °C';\n  msg.payload.current.wind_speed = msg.payload.current.wind_speed.toFixed(1) + ' m/s';\n}\n\nmsg.payload.current.wind_cardinal = degreesToCardinal(msg.payload.current.wind_deg);\nmsg.payload.current.sunrise = timeConvert(msg.payload.current.sunrise);\nmsg.payload.current.sunset = timeConvert(msg.payload.current.sunset);\n\nvar iconString = 'wi-owm-' + msg.payload.current.weather[0].icon + ' wi-4x';\nicon = {\n    ui_control: {\n        icon: iconString\n    }\n}; \n\nreturn [msg, icon];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 280,
        "wires": [
            [
                "ebeb7e6d.61e6c",
                "c9cadf3c.4dd91",
                "75f934f.744b2cc",
                "a77336d4.24c878",
                "ffd2dd.8b18ad2",
                "f9da79c2.9a6128"
            ],
            [
                "509eb66d.0f6d88"
            ]
        ]
    },
    {
        "id": "a887c10.0424b4",
        "type": "change",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "name": "Set location, appid, units",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.lat",
                "pt": "msg",
                "to": "35.64",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.lon",
                "pt": "msg",
                "to": "139.75",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.appid",
                "pt": "msg",
                "to": "15d881fdb1d9153fb4f7a70b1213113b",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.units",
                "pt": "msg",
                "to": "metric",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "units",
                "pt": "flow",
                "to": "payload.units",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "c8db48f7.af9608"
            ]
        ]
    },
    {
        "id": "45293d1e.aedc04",
        "type": "link out",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "name": "Refresh",
        "links": [
            "b8c07479.ab99c8"
        ],
        "x": 1815,
        "y": 380,
        "wires": []
    },
    {
        "id": "b8c07479.ab99c8",
        "type": "link in",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "name": "",
        "links": [
            "45293d1e.aedc04"
        ],
        "x": 855,
        "y": 260,
        "wires": [
            [
                "a887c10.0424b4"
            ]
        ]
    },
    {
        "id": "5914ecc9.808654",
        "type": "function",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "name": "Parse telemetry JSON",
        "func": "\nvar newMsg =  { \n        payload: new Date(msg.payload[0].time)\n};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1240,
        "y": 1600,
        "wires": [
            [
                "1c83a03b.a169c"
            ]
        ]
    },
    {
        "id": "8b39391d.356ce8",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "",
        "func": "\n var series =[\"Water quality\", \"Water temperature\", \"Luminosity\", \"Water PH\"];\n var labels = [\"Water quality\", \"Water temperature\", \"Luminosity\", \"Water PH\"];\n var data = [];\n var dataWaterQuality = [];\n var dataWaterPH = [];\n var dataWaterTemperature = [];\n var dataLuminosity = [];\n\n var i, len, string;\n\n for (i = 0, len = msg.payload.waterTemperature.length, string = \"\"; i < len; i++) {\n  dataWaterTemperature.push({\n        \"x\":Date.parse(msg.payload.waterTemperature[i].time), \n        \"y\":Number(msg.payload.waterTemperature[i].value)});\n  }\n\n for (i = 0, len = msg.payload.waterQuality.length, string = \"\"; i < len; i++) {\n    dataWaterQuality.push({\n        \"x\":Date.parse(msg.payload.waterQuality[i].time), \n        \"y\":Number(msg.payload.waterQuality[i].value)});\n }\n \n for (i = 0, len = msg.payload.luminosity.length, string = \"\"; i < len; i++) {\n    dataLuminosity.push({\n        \"x\":Date.parse(msg.payload.luminosity[i].time), \n        \"y\":Number(msg.payload.luminosity[i].value)});\n }\n \n for (i = 0, len = msg.payload.waterPH.length, string = \"\"; i < len; i++) {\n    dataWaterPH.push({\n        \"x\":Date.parse(msg.payload.waterPH[i].time), \n        \"y\":Number(msg.payload.waterPH[i].value)});\n }\n     \n\n data = [dataWaterQuality, dataWaterTemperature,\n    dataLuminosity, dataWaterPH];\n    \n msg.payload = [{series, data, labels}];\n\n return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1600,
        "y": 926,
        "wires": [
            [
                "ad68634.aaabaa"
            ]
        ]
    },
    {
        "id": "fff065af.0a0958",
        "type": "change",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "waterQuality",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 640,
        "wires": [
            [
                "abe678a7.9a28b8"
            ]
        ]
    },
    {
        "id": "7b566b7.097d094",
        "type": "change",
        "z": "1d22c714.e50369",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "waterTemperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 1026,
        "wires": [
            [
                "abe678a7.9a28b8"
            ]
        ]
    },
    {
        "id": "abe678a7.9a28b8",
        "type": "join",
        "z": "1d22c714.e50369",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "origin",
        "joiner": "message",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1470,
        "y": 926,
        "wires": [
            [
                "8b39391d.356ce8"
            ]
        ]
    },
    {
        "id": "3e5edd24.dccb82",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Parse telemetry JSON",
        "func": "\nvar newMsg =  { \n        payload: new Date(msg.payload[0].time)\n};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1180,
        "y": 986,
        "wires": [
            [
                "ad8e7270.bfabd"
            ]
        ]
    },
    {
        "id": "eb66256c.111fa8",
        "type": "function",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "name": "Parse telemetry JSON",
        "func": "\nvar newMsg =  { \n        payload: new Date(msg.payload[0].time)\n};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1380,
        "y": 600,
        "wires": [
            [
                "383c0ad2.b2e656"
            ]
        ]
    },
    {
        "id": "b9dd843.3247178",
        "type": "delay",
        "z": "87cb301d.9893c",
        "name": "",
        "pauseType": "delayv",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1480,
        "y": 373,
        "wires": [
            [
                "25335612.5b58da"
            ]
        ]
    },
    {
        "id": "e6b06459.aad598",
        "type": "mqtt out",
        "z": "87cb301d.9893c",
        "name": "Water spray",
        "topic": "hydro/water_spray/switch",
        "qos": "0",
        "retain": "",
        "broker": "a0e631b8.d383b",
        "x": 830,
        "y": 313,
        "wires": []
    },
    {
        "id": "a1ae6930.2b69c8",
        "type": "mqtt in",
        "z": "1d22c714.e50369",
        "name": "",
        "topic": "hydro/water_spray/s",
        "qos": "0",
        "datatype": "auto",
        "broker": "a0e631b8.d383b",
        "x": 250,
        "y": 2320,
        "wires": [
            [
                "bde231de.d54eb"
            ]
        ]
    },
    {
        "id": "8c5d6ffa.8aeae",
        "type": "link out",
        "z": "87cb301d.9893c",
        "name": "",
        "links": [],
        "x": -35,
        "y": 60,
        "wires": []
    },
    {
        "id": "25335612.5b58da",
        "type": "change",
        "z": "87cb301d.9893c",
        "name": "Switch to off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1630,
        "y": 373,
        "wires": [
            [
                "c1e51a25.bcd2f8"
            ]
        ]
    },
    {
        "id": "dec1467a.516188",
        "type": "switch",
        "z": "87cb301d.9893c",
        "name": "When water spray on",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 860,
        "y": 373,
        "wires": [
            [
                "57e4ad43.c33774"
            ]
        ]
    },
    {
        "id": "e78bf6ed.43bf08",
        "type": "inject",
        "z": "1d22c714.e50369",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 190,
        "y": 1800,
        "wires": [
            [
                "134f40ec.1ec4bf"
            ]
        ]
    },
    {
        "id": "cffdb1e7.15d13",
        "type": "delay",
        "z": "1d22c714.e50369",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 780,
        "y": 806,
        "wires": [
            [
                "5e814313.84529c",
                "afc9c5e2.a75b78"
            ]
        ]
    },
    {
        "id": "517995d5.866e6c",
        "type": "change",
        "z": "1d22c714.e50369",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "luminosity",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 846,
        "wires": [
            [
                "abe678a7.9a28b8"
            ]
        ]
    },
    {
        "id": "5a973813.655e68",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Parse telemetry JSON",
        "func": "\nvar newMsg =  { \n        payload: new Date(msg.payload[0].time)\n};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1200,
        "y": 806,
        "wires": [
            [
                "cb675a7c.a85308"
            ]
        ]
    },
    {
        "id": "7d66ede7.acf094",
        "type": "delay",
        "z": "1d22c714.e50369",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 760,
        "y": 1206,
        "wires": [
            [
                "4594e62e.1bff58",
                "42b0c0f5.42fdf"
            ]
        ]
    },
    {
        "id": "a12ec6c.7faa138",
        "type": "change",
        "z": "1d22c714.e50369",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "waterPH",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 1246,
        "wires": [
            [
                "abe678a7.9a28b8"
            ]
        ]
    },
    {
        "id": "9442afba.2d0c3",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Parse telemetry JSON",
        "func": "\nvar newMsg =  { \n        payload: new Date(msg.payload[0].time)\n};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1180,
        "y": 1206,
        "wires": [
            [
                "1aca970a.1a6d09"
            ]
        ]
    },
    {
        "id": "134f40ec.1ec4bf",
        "type": "camerapi-takephoto",
        "z": "1d22c714.e50369",
        "filemode": "1",
        "filename": "photo1.JPEG",
        "filedefpath": "0",
        "filepath": "/home/pi/.node-red/projects/hydro/ui-media/",
        "fileformat": "jpeg",
        "resolution": "4",
        "rotation": "0",
        "fliph": "0",
        "flipv": "0",
        "brightness": "50",
        "contrast": "0",
        "sharpness": "0",
        "quality": "80",
        "imageeffect": "none",
        "exposuremode": "night",
        "iso": "0",
        "agcwait": "1.0",
        "led": "0",
        "awb": "auto",
        "name": "Take Photo",
        "x": 360,
        "y": 1800,
        "wires": [
            [
                "ec42ca0e.6c9dd8"
            ]
        ]
    },
    {
        "id": "6a5ac7a1.e350c8",
        "type": "influxdb out",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "influxdb": "8193652c.e6bda8",
        "name": "",
        "measurement": "water_quality",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1060,
        "y": 560,
        "wires": []
    },
    {
        "id": "b5c12285.51ca3",
        "type": "influxdb out",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "influxdb": "8193652c.e6bda8",
        "name": "",
        "measurement": "room_temperature",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1000,
        "y": 1560,
        "wires": []
    },
    {
        "id": "f3b265b2.271218",
        "type": "influxdb out",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "influxdb": "8193652c.e6bda8",
        "name": "",
        "measurement": "room_humidity",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 990,
        "y": 1700,
        "wires": []
    },
    {
        "id": "b7f7abe3.8afe58",
        "type": "influxdb out",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "",
        "measurement": "luminosity",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 870,
        "y": 766,
        "wires": []
    },
    {
        "id": "f9ece608.ba06e8",
        "type": "influxdb out",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "",
        "measurement": "water_temperature",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 880,
        "y": 946,
        "wires": []
    },
    {
        "id": "e3814403.711458",
        "type": "influxdb out",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "",
        "measurement": "water_ph",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 850,
        "y": 1166,
        "wires": []
    },
    {
        "id": "1b07e4d1.7c4d9b",
        "type": "influxdb in",
        "z": "5127740.f28848c",
        "g": "9735f20b.9f01e",
        "influxdb": "8193652c.e6bda8",
        "name": "Mean water PH over last 20min",
        "query": "SELECT mean(value) FROM water_ph WHERE time >= now() - 20m",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 270,
        "y": 180,
        "wires": [
            [
                "3e247b14.95d3a4"
            ]
        ]
    },
    {
        "id": "c2314fab.6c8af",
        "type": "influxdb in",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "influxdb": "8193652c.e6bda8",
        "name": "Select last entry",
        "query": "SELECT * FROM room_temperature GROUP BY * ORDER BY DESC LIMIT 1",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1040,
        "y": 1600,
        "wires": [
            [
                "5914ecc9.808654"
            ]
        ]
    },
    {
        "id": "7fe995e5.477afc",
        "type": "influxdb in",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "influxdb": "8193652c.e6bda8",
        "name": "Select last entry",
        "query": "SELECT * FROM water_quality GROUP BY * ORDER BY DESC LIMIT 1",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1120,
        "y": 600,
        "wires": [
            [
                "eb66256c.111fa8"
            ]
        ]
    },
    {
        "id": "61e95af8.591824",
        "type": "influxdb in",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "Select last entry",
        "query": "SELECT * FROM water_temperature GROUP BY * ORDER BY DESC LIMIT 1",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 920,
        "y": 986,
        "wires": [
            [
                "3e5edd24.dccb82"
            ]
        ]
    },
    {
        "id": "f8fee95.2171618",
        "type": "influxdb in",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "influxdb": "8193652c.e6bda8",
        "name": "Select past 24 hours",
        "query": "SELECT * FROM water_quality  WHERE time >= now() - 24h ORDER BY time DESC",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1140,
        "y": 640,
        "wires": [
            [
                "fff065af.0a0958"
            ]
        ]
    },
    {
        "id": "a34db445.a149b8",
        "type": "influxdb in",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "Select past 24 hours",
        "query": "SELECT * FROM water_temperature  WHERE time >= now() - 24h ORDER BY time DESC",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 940,
        "y": 1026,
        "wires": [
            [
                "7b566b7.097d094"
            ]
        ]
    },
    {
        "id": "5e814313.84529c",
        "type": "influxdb in",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "Select past 24 hours",
        "query": "SELECT * FROM luminosity  WHERE time >= now() - 24h ORDER BY time DESC",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 960,
        "y": 846,
        "wires": [
            [
                "517995d5.866e6c"
            ]
        ]
    },
    {
        "id": "afc9c5e2.a75b78",
        "type": "influxdb in",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "Select last entry",
        "query": "SELECT * FROM luminosity GROUP BY * ORDER BY DESC LIMIT 1",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 940,
        "y": 806,
        "wires": [
            [
                "5a973813.655e68"
            ]
        ]
    },
    {
        "id": "4594e62e.1bff58",
        "type": "influxdb in",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "Select last entry",
        "query": "SELECT * FROM water_ph GROUP BY * ORDER BY DESC LIMIT 1",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 920,
        "y": 1206,
        "wires": [
            [
                "9442afba.2d0c3"
            ]
        ]
    },
    {
        "id": "42b0c0f5.42fdf",
        "type": "influxdb in",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "Select past 24 hours",
        "query": "SELECT * FROM water_ph WHERE time >= now() - 24h ORDER BY time DESC",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 940,
        "y": 1246,
        "wires": [
            [
                "a12ec6c.7faa138"
            ]
        ]
    },
    {
        "id": "ed698194.f939d",
        "type": "ui_artlessgauge",
        "z": "1d22c714.e50369",
        "group": "45199dde.854f64",
        "order": 8,
        "width": 3,
        "height": 3,
        "name": "Luminosity",
        "icon": "",
        "label": "",
        "unit": "Lux",
        "layout": "radial",
        "decimals": 0,
        "differential": false,
        "minmax": true,
        "colorTrack": "#555555",
        "style": "",
        "colorFromTheme": true,
        "property": "payload",
        "secondary": "secondary",
        "inline": false,
        "sectors": [
            {
                "val": 0,
                "col": "#337f24",
                "t": "min",
                "dot": 0
            },
            {
                "val": 15000,
                "col": "#337f24",
                "t": "max",
                "dot": 0
            }
        ],
        "lineWidth": "3",
        "bgcolorFromTheme": true,
        "diffCenter": "",
        "x": 790,
        "y": 720,
        "wires": []
    },
    {
        "id": "ddf60a00.0b8158",
        "type": "ui_artlessgauge",
        "z": "1d22c714.e50369",
        "group": "8a9b009f.1b35d",
        "order": 16,
        "width": 6,
        "height": 1,
        "name": "Water temperature",
        "icon": "fa-thermometer",
        "label": "Water T°",
        "unit": " °C",
        "layout": "linear",
        "decimals": "1",
        "differential": false,
        "minmax": false,
        "colorTrack": "#555555",
        "style": "",
        "colorFromTheme": true,
        "property": "payload",
        "secondary": "secondary",
        "inline": true,
        "sectors": [
            {
                "val": 0,
                "col": "#ff9900",
                "t": "min",
                "dot": 0
            },
            {
                "val": 5,
                "col": "#cccc00",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 15,
                "col": "#337f24",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 25,
                "col": "#d7771d",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 40,
                "col": "#d7771d",
                "t": "max",
                "dot": 0
            }
        ],
        "lineWidth": "5",
        "bgcolorFromTheme": true,
        "diffCenter": "",
        "x": 790,
        "y": 906,
        "wires": []
    },
    {
        "id": "63de4a5e.7c19a4",
        "type": "ui_artlessgauge",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "group": "8d4aab9b.4d6328",
        "order": 2,
        "width": 3,
        "height": 3,
        "name": "Water Quality",
        "icon": "",
        "label": "",
        "unit": "PPM",
        "layout": "radial",
        "decimals": 0,
        "differential": false,
        "minmax": true,
        "colorTrack": "#555555",
        "style": "",
        "colorFromTheme": true,
        "property": "payload",
        "secondary": "secondary",
        "inline": true,
        "sectors": [
            {
                "val": 0,
                "col": "#ff6666",
                "t": "min",
                "dot": 0
            },
            {
                "val": 2500,
                "col": "#ff6666",
                "t": "max",
                "dot": 0
            }
        ],
        "lineWidth": "3",
        "bgcolorFromTheme": true,
        "diffCenter": "",
        "x": 1220,
        "y": 520,
        "wires": []
    },
    {
        "id": "9b1656b1.099d08",
        "type": "ui_artlessgauge",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "group": "8a9b009f.1b35d",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "Room temperature DHT11",
        "icon": "fa-thermometer-full",
        "label": "Room T°",
        "unit": " °C",
        "layout": "linear",
        "decimals": "1",
        "differential": false,
        "minmax": false,
        "colorTrack": "#555555",
        "style": "",
        "colorFromTheme": true,
        "property": "payload",
        "secondary": "secondary",
        "inline": true,
        "sectors": [
            {
                "val": 0,
                "col": "#ff3333",
                "t": "min",
                "dot": 0
            },
            {
                "val": 8,
                "col": "#ff9900",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 14,
                "col": "#337f24",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 30,
                "col": "#ff9900",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 40,
                "col": "#ff9900",
                "t": "max",
                "dot": 0
            }
        ],
        "lineWidth": "5",
        "bgcolorFromTheme": true,
        "diffCenter": "",
        "x": 940,
        "y": 1520,
        "wires": []
    },
    {
        "id": "a2c963c.a4756a",
        "type": "ui_artlessgauge",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "group": "8a9b009f.1b35d",
        "order": 9,
        "width": 6,
        "height": 1,
        "name": "Room Humidity DHT11",
        "icon": "fa-tint",
        "label": "Humidity",
        "unit": "%",
        "layout": "linear",
        "decimals": 0,
        "differential": false,
        "minmax": false,
        "colorTrack": "#555555",
        "style": "",
        "colorFromTheme": true,
        "property": "payload",
        "secondary": "secondary",
        "inline": true,
        "sectors": [
            {
                "val": 0,
                "col": "#ff3333",
                "t": "min",
                "dot": 0
            },
            {
                "val": 8,
                "col": "#ff9900",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 25,
                "col": "#337f24",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 70,
                "col": "#ff2300",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 100,
                "col": "#ff2300",
                "t": "max",
                "dot": 0
            }
        ],
        "lineWidth": "5",
        "bgcolorFromTheme": true,
        "diffCenter": "",
        "x": 930,
        "y": 1660,
        "wires": []
    },
    {
        "id": "df864faf.11005",
        "type": "ui_switch",
        "z": "87cb301d.9893c",
        "name": "Grow lights",
        "label": "Seed Tray  ",
        "tooltip": "Led",
        "group": "45199dde.854f64",
        "order": 10,
        "width": 2,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "hydroponic/lamp",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-toggle-on fa-2x",
        "oncolor": "#ffc30b",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "fa-toggle-off  fa-2x",
        "offcolor": "#ffc30b",
        "x": 611,
        "y": 153,
        "wires": [
            [
                "acca3832.810b88"
            ]
        ],
        "info": "# Seeds tray light"
    },
    {
        "id": "c1e51a25.bcd2f8",
        "type": "ui_switch",
        "z": "87cb301d.9893c",
        "name": "Water spray switch",
        "label": "Seed spray",
        "tooltip": "",
        "group": "6c15eb0d.8f5814",
        "order": 13,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-toggle-on fa-2x",
        "oncolor": "#0077be",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "fa-toggle-off fa-2x",
        "offcolor": "#0077be",
        "x": 630,
        "y": 313,
        "wires": [
            [
                "dec1467a.516188",
                "e6b06459.aad598"
            ]
        ]
    },
    {
        "id": "509eb66d.0f6d88",
        "type": "ui_button",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "name": "IconRefresh",
        "group": "1c37dc0b.ce28e4",
        "order": 1,
        "width": 4,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "Refresh",
        "color": "",
        "bgcolor": "",
        "icon": "fa-refresh fa-4x",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 1690,
        "y": 380,
        "wires": [
            [
                "45293d1e.aedc04"
            ]
        ]
    },
    {
        "id": "75f934f.744b2cc",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "group": "1c37dc0b.ce28e4",
        "order": 8,
        "width": 4,
        "height": 1,
        "name": "Description",
        "label": "",
        "format": "{{msg.payload.current.weather[0].description}}",
        "layout": "row-left",
        "x": 1690,
        "y": 180,
        "wires": []
    },
    {
        "id": "c9cadf3c.4dd91",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "group": "1c37dc0b.ce28e4",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "Wind",
        "label": "",
        "format": "{{msg.payload.current.wind_speed}}&nbsp;&nbsp;<i class=\"wi wi-darksky-wind\"></i>&nbsp;&nbsp;{{msg.payload.current.wind_cardinal}}",
        "layout": "col-center",
        "x": 1670,
        "y": 260,
        "wires": []
    },
    {
        "id": "a77336d4.24c878",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "group": "1c37dc0b.ce28e4",
        "order": 4,
        "width": 4,
        "height": 1,
        "name": "SunriseTime",
        "label": "",
        "format": "<i class=\"wi wi-owm-01d\"></i>&nbsp;<i class=\"fa fa-arrow-up\"></i>&nbsp;&nbsp;{{msg.payload.current.sunrise}}",
        "layout": "row-left",
        "x": 1690,
        "y": 300,
        "wires": []
    },
    {
        "id": "ffd2dd.8b18ad2",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "group": "1c37dc0b.ce28e4",
        "order": 9,
        "width": 4,
        "height": 1,
        "name": "SunsetTime",
        "label": "",
        "format": "<i class=\"wi wi-owm-01d\"></i>&nbsp;<i class=\"fa fa-arrow-down\"></i>&nbsp;&nbsp;{{msg.payload.current.sunset}}",
        "layout": "row-left",
        "x": 1690,
        "y": 340,
        "wires": []
    },
    {
        "id": "ebeb7e6d.61e6c",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "group": "1c37dc0b.ce28e4",
        "order": 7,
        "width": 3,
        "height": 1,
        "name": "Temperature",
        "label": "",
        "format": "<p style=\"font-size: 200%\">{{msg.payload.current.temp}}</p>",
        "layout": "row-left",
        "x": 1690,
        "y": 220,
        "wires": []
    },
    {
        "id": "1c83a03b.a169c",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "g": "ca2296d8.64fa18",
        "group": "8a9b009f.1b35d",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "Last refresh - temp",
        "label": "",
        "format": "<i class=\"fa fa-refresh\" aria-hidden=\"true\">&nbsp; {{ msg.payload | date: 'HH:mm:ss'}}</i> ",
        "layout": "row-right",
        "x": 1450,
        "y": 1600,
        "wires": []
    },
    {
        "id": "ad8e7270.bfabd",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "8a9b009f.1b35d",
        "order": 13,
        "width": 3,
        "height": 1,
        "name": "Last refresh - water temp",
        "label": "",
        "format": "<i class=\"fa fa-refresh\" aria-hidden=\"true\">&nbsp; {{ msg.payload | date: 'HH:mm:ss'}}</i> ",
        "layout": "row-right",
        "x": 1410,
        "y": 986,
        "wires": []
    },
    {
        "id": "383c0ad2.b2e656",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "group": "8d4aab9b.4d6328",
        "order": 7,
        "width": 3,
        "height": 1,
        "name": "Last refresh - water quality",
        "label": "",
        "format": "<i class=\"fa fa-refresh\" aria-hidden=\"true\">&nbsp; {{ msg.payload | date: 'HH:mm:ss'}}</i> ",
        "layout": "row-center",
        "x": 1620,
        "y": 600,
        "wires": []
    },
    {
        "id": "cb675a7c.a85308",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "45199dde.854f64",
        "order": 17,
        "width": 3,
        "height": 1,
        "name": "Last refresh - luminosity",
        "label": "",
        "format": "<front size=\"1\"><i class=\"fa fa-refresh\">&nbsp; {{ msg.payload | date: 'HH:mm:ss'}}</i> </font>",
        "layout": "row-center",
        "x": 1470,
        "y": 806,
        "wires": []
    },
    {
        "id": "1aca970a.1a6d09",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "65d119b5.66cb78",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "Last refresh - water PH",
        "label": "",
        "format": "<i class=\"fa fa-refresh\" aria-hidden=\"true\">&nbsp; {{ msg.payload | date: 'HH:mm:ss'}}</i> ",
        "layout": "row-right",
        "x": 1410,
        "y": 1206,
        "wires": []
    },
    {
        "id": "ad68634.aaabaa",
        "type": "ui_chart",
        "z": "1d22c714.e50369",
        "name": "Seed tray historical value graph",
        "group": "fc40ab90.fee1e8",
        "order": 1,
        "width": "0",
        "height": "0",
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1830,
        "y": 926,
        "wires": [
            []
        ]
    },
    {
        "id": "f3e2c3ad.8ebb2",
        "type": "ui_toast",
        "z": "5127740.f28848c",
        "g": "9735f20b.9f01e",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Water PH",
        "name": "Alert ",
        "x": 1070,
        "y": 164,
        "wires": []
    },
    {
        "id": "ec42ca0e.6c9dd8",
        "type": "ui_template",
        "z": "1d22c714.e50369",
        "group": "f0e58282.f2736",
        "name": "Seed tray camera",
        "order": 1,
        "width": 8,
        "height": 8,
        "format": "<md-card class=\"md-primary\">\n  \n  <md-card-actions>\n   <md-button ng-click=\"send({payload:1})\" >\n       <ui-icon icon=\"camera\"></ui-icon>Take a photo<br>\n   </md-button>\n   <md-button ng-click=\"send({payload:1})\" >\n     <i class=\"fa fa-refresh\" aria-hidden=\"true\">  {{timestamp | date: 'MMM d, y - HH:mm:ss'}}</i>\n   </md-button>\n  </md-card-actions>\n  \n  <md-card-header>\n    <md-card-media>\n         <img width=\"360\" height=\"240\" src=\"{{photoURL}}\" class=\"md-card-image\" >\n    </md-card-media>\n  </md-card-header>\n\n</md-card>\n\n\n\n<script>\n\n(function(scope) {\n    // $watch fires each time the node is triggered in the flow\n    scope.$watch('msg', function(msg) {\n        scope.timestamp = new Date();\n        scope.photoURL = \"/photo1.JPEG?_=\" + new Date();\n    });\n\n})(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 380,
        "y": 1860,
        "wires": [
            [
                "134f40ec.1ec4bf"
            ]
        ]
    },
    {
        "id": "f9da79c2.9a6128",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "group": "1c37dc0b.ce28e4",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "Timezone",
        "label": "",
        "format": "{{msg.payload.timezone}}",
        "layout": "row-left",
        "x": 1680,
        "y": 140,
        "wires": []
    },
    {
        "id": "5d2f5ff2.180c5",
        "type": "delay",
        "z": "87cb301d.9893c",
        "name": "",
        "pauseType": "delayv",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1000,
        "y": 820,
        "wires": [
            [
                "a7364d44.56698"
            ]
        ]
    },
    {
        "id": "5be7de2e.ba1d2",
        "type": "mqtt out",
        "z": "87cb301d.9893c",
        "name": "Nutriments A",
        "topic": "hydro/nutriments/switch",
        "qos": "0",
        "retain": "",
        "broker": "a0e631b8.d383b",
        "x": 550,
        "y": 740,
        "wires": []
    },
    {
        "id": "a7364d44.56698",
        "type": "change",
        "z": "87cb301d.9893c",
        "name": "Switch to off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 820,
        "wires": [
            [
                "648ce0a1.8a9de"
            ]
        ]
    },
    {
        "id": "93cd22de.a5d2c",
        "type": "switch",
        "z": "87cb301d.9893c",
        "name": "When nutriments spray on",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 820,
        "wires": [
            [
                "bb16ff0b.197e6"
            ]
        ]
    },
    {
        "id": "648ce0a1.8a9de",
        "type": "ui_switch",
        "z": "87cb301d.9893c",
        "name": "Solution A switch",
        "label": "Sol. A",
        "tooltip": "",
        "group": "8d4aab9b.4d6328",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-toggle-on fa-2x",
        "oncolor": "#bb86fc",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "fa-toggle-off fa-2x",
        "offcolor": "#bb86fc",
        "x": 350,
        "y": 740,
        "wires": [
            [
                "93cd22de.a5d2c",
                "5be7de2e.ba1d2"
            ]
        ]
    },
    {
        "id": "9cd0faa8.7a4eb8",
        "type": "mqtt in",
        "z": "1d22c714.e50369",
        "name": "",
        "topic": "hydro/nutriments/s",
        "qos": "0",
        "datatype": "auto",
        "broker": "a0e631b8.d383b",
        "x": 250,
        "y": 2614,
        "wires": [
            [
                "222cf8a.db51b08"
            ]
        ]
    },
    {
        "id": "821d2e1a.d0244",
        "type": "ui_gauge",
        "z": "1d22c714.e50369",
        "name": "Water level",
        "group": "6c15eb0d.8f5814",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "wave",
        "title": "",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1030,
        "y": 1346,
        "wires": []
    },
    {
        "id": "b1c0fbbf.8e9c58",
        "type": "influxdb out",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "",
        "measurement": "water_level",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 860,
        "y": 1386,
        "wires": []
    },
    {
        "id": "ce4f2657.0c3588",
        "type": "delay",
        "z": "1d22c714.e50369",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 760,
        "y": 1426,
        "wires": [
            [
                "f0da22f5.a0782"
            ]
        ]
    },
    {
        "id": "8e23d689.2cf748",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Parse telemetry JSON",
        "func": "\nvar newMsg =  { \n        payload: new Date(msg.payload[0].time)\n};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1180,
        "y": 1426,
        "wires": [
            [
                "62029373.97ee9c"
            ]
        ]
    },
    {
        "id": "f0da22f5.a0782",
        "type": "influxdb in",
        "z": "1d22c714.e50369",
        "influxdb": "8193652c.e6bda8",
        "name": "Select last entry",
        "query": "SELECT * FROM water_level GROUP BY * ORDER BY DESC LIMIT 1",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 920,
        "y": 1426,
        "wires": [
            [
                "8e23d689.2cf748"
            ]
        ]
    },
    {
        "id": "62029373.97ee9c",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "6c15eb0d.8f5814",
        "order": 6,
        "width": 3,
        "height": 1,
        "name": "Last refresh - water level",
        "label": "",
        "format": "<i class=\"fa fa-refresh\" aria-hidden=\"true\">&nbsp; {{ msg.payload | date: 'HH:mm:ss'}}</i> ",
        "layout": "row-center",
        "x": 1410,
        "y": 1426,
        "wires": []
    },
    {
        "id": "4c00e295.9a2f5c",
        "type": "inject",
        "z": "5127740.f28848c",
        "g": "9735f20b.9f01e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2700",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "1b07e4d1.7c4d9b"
            ]
        ]
    },
    {
        "id": "f76a168.49897e8",
        "type": "function",
        "z": "5127740.f28848c",
        "g": "9735f20b.9f01e",
        "name": "Simulate an input",
        "func": "msg.payload = \"PH too low\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 240,
        "wires": [
            [
                "f3e2c3ad.8ebb2"
            ]
        ]
    },
    {
        "id": "5d9dc44f.a6cccc",
        "type": "switch",
        "z": "5127740.f28848c",
        "g": "3cd27958.a703b6",
        "name": "PPM conditions, min and max values",
        "property": "payload[0].mean",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "maxPPM",
                "vt": "global"
            },
            {
                "t": "lt",
                "v": "minPPM",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 460,
        "wires": [
            [
                "78ee2d93.0854e4"
            ],
            [
                "7485b5.c5f5ca4c",
                "4a15ab80.153564"
            ]
        ]
    },
    {
        "id": "78ee2d93.0854e4",
        "type": "function",
        "z": "5127740.f28848c",
        "g": "3cd27958.a703b6",
        "name": "Set warning - PPM too high",
        "func": "msg.payload = \"PPM too high\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 920,
        "y": 424,
        "wires": [
            [
                "7ebdaedb.473e9"
            ]
        ]
    },
    {
        "id": "6b31749d.19ee4c",
        "type": "influxdb in",
        "z": "5127740.f28848c",
        "g": "3cd27958.a703b6",
        "influxdb": "8193652c.e6bda8",
        "name": "Mean PPM over last 6h",
        "query": "SELECT mean(value) FROM water_quality WHERE time >= now() - 6h",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "5d9dc44f.a6cccc"
            ]
        ]
    },
    {
        "id": "7ebdaedb.473e9",
        "type": "ui_toast",
        "z": "5127740.f28848c",
        "g": "3cd27958.a703b6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Water PPM",
        "name": "Alert ",
        "x": 1130,
        "y": 460,
        "wires": []
    },
    {
        "id": "7485b5.c5f5ca4c",
        "type": "function",
        "z": "5127740.f28848c",
        "g": "3cd27958.a703b6",
        "name": "Set warning - PPM too low",
        "func": "msg.payload = \"PPM too low\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 920,
        "y": 484,
        "wires": [
            [
                "7ebdaedb.473e9"
            ]
        ]
    },
    {
        "id": "4c35d949.85d758",
        "type": "file",
        "z": "87cb301d.9893c",
        "name": "WriteFile",
        "filename": "/home/pi/.node-red/projects/hydro/time-scheduler.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 113,
        "wires": [
            []
        ]
    },
    {
        "id": "6705ebab.d4f8a4",
        "type": "inject",
        "z": "87cb301d.9893c",
        "name": "FireAfterReboot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 46,
        "wires": [
            [
                "8dafbb4d.b18898"
            ]
        ]
    },
    {
        "id": "8dafbb4d.b18898",
        "type": "file in",
        "z": "87cb301d.9893c",
        "name": "ReadFile",
        "filename": "/home/pi/.node-red/projects/hydro/time-scheduler.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 360,
        "y": 46,
        "wires": [
            [
                "28cc1585.a3940a"
            ]
        ]
    },
    {
        "id": "28cc1585.a3940a",
        "type": "ui_time_scheduler",
        "z": "87cb301d.9893c",
        "group": "72b67add.961f74",
        "name": "Scheduler",
        "startDay": "1",
        "refresh": 60,
        "devices": [
            "Grow lights",
            "Water spray",
            "Water pump"
        ],
        "customPayload": false,
        "eventMode": true,
        "sendTopic": false,
        "outputs": 4,
        "order": 1,
        "width": 8,
        "height": 2,
        "x": 340,
        "y": 280,
        "wires": [
            [
                "4c35d949.85d758"
            ],
            [
                "df864faf.11005"
            ],
            [
                "c1e51a25.bcd2f8"
            ],
            [
                "933e05f4.0abbb8"
            ]
        ]
    },
    {
        "id": "23810c02.07fa14",
        "type": "inject",
        "z": "5127740.f28848c",
        "g": "3cd27958.a703b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 192,
        "y": 406,
        "wires": [
            [
                "6b31749d.19ee4c"
            ]
        ]
    },
    {
        "id": "10e9a27.bb9f05e",
        "type": "comment",
        "z": "87cb301d.9893c",
        "name": "### Nutriments controler ###",
        "info": "",
        "x": 260,
        "y": 700,
        "wires": []
    },
    {
        "id": "bb16ff0b.197e6",
        "type": "persist out",
        "z": "87cb301d.9893c",
        "name": "nutrimentsSolutionATimer",
        "storageNode": "217cc961.603ce6",
        "x": 650,
        "y": 820,
        "wires": [
            [
                "cf53cc34.c3564"
            ]
        ]
    },
    {
        "id": "cf53cc34.c3564",
        "type": "function",
        "z": "87cb301d.9893c",
        "name": "msg.delay",
        "func": "var newMsg = { delay: (msg.payload * 1000) };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 850,
        "y": 820,
        "wires": [
            [
                "5d2f5ff2.180c5"
            ]
        ]
    },
    {
        "id": "b2d124cc.ae5b18",
        "type": "function",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "name": "Configure PPM sectors",
        "func": "var minPPM = global.get('minPPM') || 0;\nvar maxPPM = global.get('maxPPM') || 0;\nvar centerPPM = parseInt((minPPM + maxPPM) / 2);\n\nvar newSectors = [\n    {t:\"min\",val:0,col:\"#ff5252\",dot:0},\n    {t:\"sec\",val:minPPM,col:\"#4CAF50\",dot:0},\n    {t:\"sec\",val:maxPPM,col:\"#ff5252\",dot:0},\n    {t:\"max\",val:2000,col:\"#ff5252\",dot:0}] \n\n\nmsg.control = \n  {sectors:newSectors, center: centerPPM}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 520,
        "wires": [
            [
                "63de4a5e.7c19a4"
            ]
        ]
    },
    {
        "id": "57e4ad43.c33774",
        "type": "persist out",
        "z": "87cb301d.9893c",
        "name": "waterSprayTimer",
        "storageNode": "217cc961.603ce6",
        "x": 1110,
        "y": 373,
        "wires": [
            [
                "77dd4f6a.f114"
            ]
        ]
    },
    {
        "id": "77dd4f6a.f114",
        "type": "function",
        "z": "87cb301d.9893c",
        "name": "msg.delay",
        "func": "var newMsg = { delay: (msg.payload * 1000) };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 373,
        "wires": [
            [
                "b9dd843.3247178"
            ]
        ]
    },
    {
        "id": "b8023ba0.969078",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Configure water level widget",
        "func": "msg.payload = parseInt(msg.payload * 100 / 7);\nvar thresholdMin = global.get('seedTray.water.level.threshold.low');\nvar thresholdMax = global.get('seedTray.water.level.threshold.high');\n\n\nmsg.ui_control = {options: {\n    textColor:\"#FFFFFF\", \n    waveTextColor:\"#FFFFFF\", \n    textSize: 0.7,\n    textVertPosition: .6,\n    displayPercent: true,\n    waveColor: \n        (msg.payload > thresholdMin && msg.payload < thresholdMax) ? \"#0077be\" : \"#cc3300\",\n    //waveAnimate: true,\n    //waveAnimateTime: 200000,\n    //waveCount: 3,\n    waveOffset: 0.25,\n    circleThickness: 0.05,\n    circleColor:(msg.payload > thresholdMin && msg.payload < thresholdMax) ? \"#0077be\" : \"#cc3300\",\n    valueCountUp: false // disable count up upon loading \n\n }\n};\n\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 1346,
        "wires": [
            [
                "821d2e1a.d0244"
            ]
        ]
    },
    {
        "id": "da7d1a1e.239e58",
        "type": "kasa",
        "z": "87cb301d.9893c",
        "name": "Hydroponic - Water pump  - HS105(JP)",
        "device": "192.168.1.8",
        "interval": 60000,
        "eventInterval": 15000,
        "payload": "getInfo",
        "payloadType": "info",
        "debug": false,
        "x": 870,
        "y": 460,
        "wires": [
            [
                "2f179774.4055e8",
                "c86dc712.4a8a48"
            ]
        ]
    },
    {
        "id": "d9cef345.e508b",
        "type": "comment",
        "z": "87cb301d.9893c",
        "name": "### Hydro water pump ###",
        "info": "",
        "x": 380,
        "y": 380,
        "wires": []
    },
    {
        "id": "6c1d8e8.c6bf77",
        "type": "function",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "name": "Save Global variable - total natural light",
        "func": "var sunrise = new Date(msg.payload.current.sunrise);\nvar sunset = new Date(msg.payload.current.sunset);\nvar totalNaturalLight = sunset - sunrise;\n\nglobal.set('sunrise.timestamp', msg.payload.current.sunrise*1000);\nglobal.set('sunset.timestamp', msg.payload.current.sunset*1000);\nglobal.set('sun.total', totalNaturalLight);\n\nmsg.payload = totalNaturalLight;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1320,
        "y": 360,
        "wires": [
            [
                "15bc06eb.0cde59"
            ]
        ]
    },
    {
        "id": "7b62dc10.8cd624",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Compute day light, LED and dark duration",
        "func": "var timestampSunLight = global.get('sun.total'); // in seconds\nvar totalLight = global.get('seed.totalLight') * 60 * 60; // in seconds\n\nvar ledLight = totalLight - timestampSunLight; // total seconds needs \n// Save timer off time (sunset + duration)\nglobal.set('seedTray.led.timer.off', global.get('sunset.timestamp') + ledLight * 1000);\n\nvar darkMode = 24*60*60 - totalLight;\n\nfunction format(time) {   \n    // Hours, minutes and seconds\n    var hrs = ~~(time / 3600);\n    var mins = ~~((time % 3600) / 60);\n\n    // Output like \"1:01\" or \"4:03\" or \"123:03\"\n    var ret = \"\";\n    if (hrs > 0) {\n        ret += \"\" + hrs + \" hr \"; \n        if (mins > 0) {\n            ret += (mins < 10 ? \"0\" : \"\") + mins ;\n        }\n    } else {\n        if (mins > 0) {\n            ret = (mins < 10 ? \"0\" : \"\") + mins;\n        }\n    }\n    return ret;\n}\n\nvar labelsMsg = {\"payload\": \n    [\n        {\n            \"title\": \"Sun\",\n            \"description\": format(timestampSunLight),\n            \"icon_name\": \"wi wi-owm-01d\",\n            \"hexColor\": \"#FF7F18\",\n            \"start\": global.get('sunrise.timestamp'),\n            \"end\": \"\",\n        }, \n        {  \n            \"title\": \"Led\",\n            \"description\": format(ledLight),\n            \"icon_name\": \"fa fa-lightbulb-o\",\n            \"hexColor\": global.get('color.widget.light.led'),\n            \"start\": \"\",\n            \"end\": \"\",\n        },\n        {\n            \"title\" : \"Dark\",\n            \"description\": format(darkMode),\n            \"icon_name\": \"fa fa-moon-o\",\n            \"start\": \"\"\n        }\n    ]\n};\n\n\nvar m = {};\nm.labels = [\"Sun light\", \"LED\", \"Darks\"];\nm.data = [[timestampSunLight, ledLight, darkMode]];\nm.series = [\"Total light\"];\nmsg.payload = [m];\nmsg.topic = \"\";\n\n\nreturn [labelsMsg,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 2080,
        "wires": [
            [
                "e765c1ba.7b85",
                "a9374d16.74677"
            ],
            [
                "abb9ac18.9b28d"
            ]
        ]
    },
    {
        "id": "15bc06eb.0cde59",
        "type": "link out",
        "z": "1d22c714.e50369",
        "g": "cdba4a8d.9d7c08",
        "name": "Global var - Total day light",
        "links": [
            "de54877b.8ab618",
            "319aa41.d00645c"
        ],
        "x": 1515,
        "y": 360,
        "wires": []
    },
    {
        "id": "de54877b.8ab618",
        "type": "link in",
        "z": "1d22c714.e50369",
        "name": "",
        "links": [
            "15bc06eb.0cde59"
        ],
        "x": 155,
        "y": 2040,
        "wires": [
            [
                "7b62dc10.8cd624"
            ]
        ]
    },
    {
        "id": "abb9ac18.9b28d",
        "type": "ui_chart",
        "z": "1d22c714.e50369",
        "name": "Pi char - Light split",
        "group": "45199dde.854f64",
        "order": 1,
        "width": 4,
        "height": 4,
        "label": "",
        "chartType": "pie",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "75",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff7f18",
            "#ffc30b",
            "#d9d9d9",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 670,
        "y": 2113,
        "wires": [
            []
        ]
    },
    {
        "id": "3dfc5ff2.440c6",
        "type": "link in",
        "z": "1d22c714.e50369",
        "name": "",
        "links": [
            "a3e3f133.15036",
            "304a2fa1.758d7",
            "648d9af7.b6ea04",
            "db6792a8.788f5",
            "8a7ded76.20298"
        ],
        "x": 155,
        "y": 2140,
        "wires": [
            [
                "7b62dc10.8cd624"
            ]
        ]
    },
    {
        "id": "e765c1ba.7b85",
        "type": "ui_template",
        "z": "1d22c714.e50369",
        "group": "45199dde.854f64",
        "name": "Definition list - sun/led/dark duration",
        "order": 3,
        "width": 3,
        "height": 3,
        "format": "<md-list style=\"margin-top:0px;\">\n  <md-list-item style=\"padding-bottom:15px;padding-left:10px;max-height:17px;min-height:0px;\"\n   ng-repeat = \"(index, item) in msg.payload\">\n        <div class=\"md-list-item-text compact\">\n          <font color=\"{{item.hexColor}}\"> \n              <i class=\"{{item.icon_name}}\"> </i> \n               {{item.title}} {{item.description}}\n          </font> \n        \n        </div>\n       \n </md-list-item>\n \n</md-list>\n\n<md-divider></md-divider>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 730,
        "y": 2033,
        "wires": [
            []
        ]
    },
    {
        "id": "bde231de.d54eb",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Set color",
        "func": "msg.color = (msg.payload == \"true\") ? global.get(\"color.widget.water\") : \"grey\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 2320,
        "wires": [
            [
                "b2382129.49d1f"
            ]
        ]
    },
    {
        "id": "b2382129.49d1f",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "6c15eb0d.8f5814",
        "order": 14,
        "width": 1,
        "height": 1,
        "name": "Water spray on/off state",
        "label": "<font color=\"{{msg.color}}\"><i class=\"fa fa-tint fa-2x\"></i></front>",
        "format": "",
        "layout": "row-spread",
        "x": 630,
        "y": 2320,
        "wires": []
    },
    {
        "id": "f3b66e1d.ccca9",
        "type": "template",
        "z": "1d22c714.e50369",
        "name": "Water widget - status",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": " <md-card>\n    <md-card-content>\n          <p>\n           Water pump runs for <font color=\"{{global.color.widget.water}}\"> {{global.settings.water_pump.duration}} secs.</font> \n          , or stops when seed tray is filled at >50%.\n         </p>\n    </md-card-content>\n</md-card>\n<md-card>\n  <md-card-content>\n   <h5>\n       {{#global.seedTray.water.level.warning.low}}\n        <font color=\"{{global.color.warning}}\" align=\"center\"> <i class=\"fa fa-exclamation-circle\"></i> Water level is too low.</font>\n        {{/global.seedTray.water.level.warning.low}} \n        \n        {{#global.seedTray.water.level.warning.high}}\n         <font color=\"{{global.color.warning}}\" align=\"center\"> <i class=\"fa fa-exclamation-circle\"></i> Water level is too high.</font>\n        {{/global.seedTray.water.level.warning.high}} \n    </h5>\n    \n    <p>\n        Seed Tray - water spray runs for <font color=\"{{global.color.widget.water}}\"> {{global.durationWaterSpray}}</font> \n        seconds every  <font color=\"{{global.color.widget.water}}\">two days</font>\n    </p>\n  </md-card-content>\n</md-card>\n\n",
        "output": "str",
        "x": 480,
        "y": 2380,
        "wires": [
            [
                "f64b20c.caba7e"
            ]
        ]
    },
    {
        "id": "f64b20c.caba7e",
        "type": "ui_template",
        "z": "1d22c714.e50369",
        "group": "6c15eb0d.8f5814",
        "name": "",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 660,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "441e548d.39500c",
        "type": "inject",
        "z": "1d22c714.e50369",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 2380,
        "wires": [
            [
                "f3b66e1d.ccca9"
            ]
        ]
    },
    {
        "id": "593527d0.c1f528",
        "type": "link in",
        "z": "1d22c714.e50369",
        "name": "Refresh template seed tray water",
        "links": [
            "bbae5ec0.7849",
            "bec62e16.5d9dc",
            "88e72de5.1224f"
        ],
        "x": 255,
        "y": 2440,
        "wires": [
            [
                "f3b66e1d.ccca9"
            ]
        ]
    },
    {
        "id": "a150ea22.90b8b8",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Global var water level",
        "func": "global.set(\"seedTray.water.level.current\", parseInt(msg.payload * 100 / 7));\n\nif (global.get(\"seedTray.water.level.current\") < global.get('seedTray.water.level.threshold.low')) {\n    global.set(\"seedTray.water.level.warning.low\", true);\n} else {\n    global.set(\"seedTray.water.level.warning.low\", undefined);\n}\n\nif (global.get(\"seedTray.water.level.current\") > global.get('seedTray.water.level.threshold.high')) {\n    global.set(\"seedTray.water.level.warning.high\", true);\n} else {\n    global.set(\"seedTray.water.level.warning.high\", undefined);\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 1306,
        "wires": [
            [
                "bec62e16.5d9dc"
            ]
        ]
    },
    {
        "id": "bec62e16.5d9dc",
        "type": "link out",
        "z": "1d22c714.e50369",
        "name": "",
        "links": [
            "593527d0.c1f528"
        ],
        "x": 935,
        "y": 1306,
        "wires": []
    },
    {
        "id": "a9374d16.74677",
        "type": "file in",
        "z": "1d22c714.e50369",
        "name": "ReadFile",
        "filename": "/home/pi/.node-red/projects/hydro/time-scheduler.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 640,
        "y": 2073,
        "wires": [
            [
                "ed8e6bb5.af6b78"
            ]
        ]
    },
    {
        "id": "ed8e6bb5.af6b78",
        "type": "json",
        "z": "1d22c714.e50369",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 770,
        "y": 2073,
        "wires": [
            [
                "d82e4b39.5671a8"
            ]
        ]
    },
    {
        "id": "d82e4b39.5671a8",
        "type": "change",
        "z": "1d22c714.e50369",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.timers[2].starttime",
                "pt": "msg",
                "to": "sunset.timestamp",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "payload.timers[6].starttime",
                "pt": "msg",
                "to": "seedTray.led.timer.off",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 2073,
        "wires": [
            [
                "bd0f3b34.8fff68",
                "c8dbc732.1ab628"
            ]
        ]
    },
    {
        "id": "bd0f3b34.8fff68",
        "type": "file",
        "z": "1d22c714.e50369",
        "name": "WriteFile",
        "filename": "/home/pi/.node-red/projects/hydro/time-scheduler.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1100,
        "y": 2073,
        "wires": [
            [
                "84752e32.a3167"
            ]
        ]
    },
    {
        "id": "84752e32.a3167",
        "type": "link out",
        "z": "1d22c714.e50369",
        "name": "Configure seed led scheduler",
        "links": [
            "3ca07431.002fec"
        ],
        "x": 1195,
        "y": 2073,
        "wires": []
    },
    {
        "id": "3ca07431.002fec",
        "type": "link in",
        "z": "87cb301d.9893c",
        "name": "UI scheduler - Read file",
        "links": [
            "84752e32.a3167"
        ],
        "x": 205,
        "y": 100,
        "wires": [
            [
                "8dafbb4d.b18898"
            ]
        ]
    },
    {
        "id": "a65b9b7d.ea9428",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "8a9b009f.1b35d",
        "order": 11,
        "width": 3,
        "height": 1,
        "name": "Seed tray label",
        "label": "<h3><i class=\"fa fa-leaf\"> Seed tray</h3>",
        "format": "",
        "layout": "row-left",
        "x": 960,
        "y": 1800,
        "wires": []
    },
    {
        "id": "6d71a0d6.512c",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "8a9b009f.1b35d",
        "order": 1,
        "width": 3,
        "height": 1,
        "name": "Room sensors label",
        "label": "<h3><i class=\"fa fa-home\"> Room<h3>",
        "format": "",
        "layout": "row-left",
        "x": 760,
        "y": 1800,
        "wires": []
    },
    {
        "id": "aadaca25.5f3598",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "8d4aab9b.4d6328",
        "order": 13,
        "width": 1,
        "height": 1,
        "name": "Nutriments A pump on/off state",
        "label": "<font color=\"{{msg.color}}\"><i class=\"fa fa-battery-half fa-1.5x\"></i></front>",
        "format": "",
        "layout": "row-spread",
        "x": 630,
        "y": 2614,
        "wires": []
    },
    {
        "id": "222cf8a.db51b08",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Set color",
        "func": "msg.color = (msg.payload == \"true\") ? global.get('color.widget.nutrients') : \"grey\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 2614,
        "wires": [
            [
                "aadaca25.5f3598"
            ]
        ]
    },
    {
        "id": "40258950.e35d68",
        "type": "delay",
        "z": "87cb301d.9893c",
        "name": "",
        "pauseType": "delayv",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1020,
        "y": 1080,
        "wires": [
            [
                "a5c49cb5.f3459"
            ]
        ]
    },
    {
        "id": "bf2def54.05791",
        "type": "mqtt out",
        "z": "87cb301d.9893c",
        "name": "Nutriments B",
        "topic": "hydro/nutrimentsB/switch",
        "qos": "0",
        "retain": "",
        "broker": "a0e631b8.d383b",
        "x": 550,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a5c49cb5.f3459",
        "type": "change",
        "z": "87cb301d.9893c",
        "name": "Switch to off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 1080,
        "wires": [
            [
                "d977f79c.7973f8"
            ]
        ]
    },
    {
        "id": "b29a1551.343db8",
        "type": "switch",
        "z": "87cb301d.9893c",
        "name": "When nutriments spray on",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 1080,
        "wires": [
            [
                "62da8d4e.c4ff24"
            ]
        ]
    },
    {
        "id": "d977f79c.7973f8",
        "type": "ui_switch",
        "z": "87cb301d.9893c",
        "name": "Solution B switch",
        "label": "Sol. B",
        "tooltip": "",
        "group": "8d4aab9b.4d6328",
        "order": 17,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-toggle-on fa-2x",
        "oncolor": "#bb86fc",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "fa-toggle-off fa-2x",
        "offcolor": "#bb86fc",
        "x": 350,
        "y": 1000,
        "wires": [
            [
                "b29a1551.343db8",
                "bf2def54.05791"
            ]
        ]
    },
    {
        "id": "62da8d4e.c4ff24",
        "type": "persist out",
        "z": "87cb301d.9893c",
        "name": "nutrimentsSolutionBTimer",
        "storageNode": "217cc961.603ce6",
        "x": 650,
        "y": 1080,
        "wires": [
            [
                "33f73a9b.f300e6"
            ]
        ]
    },
    {
        "id": "33f73a9b.f300e6",
        "type": "function",
        "z": "87cb301d.9893c",
        "name": "msg.delay",
        "func": "var newMsg = { delay: (msg.payload * 1000) };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 1080,
        "wires": [
            [
                "40258950.e35d68"
            ]
        ]
    },
    {
        "id": "7ce85211.37278c",
        "type": "mqtt in",
        "z": "1d22c714.e50369",
        "name": "",
        "topic": "hydro/nutrimentsB/s",
        "qos": "0",
        "datatype": "auto",
        "broker": "a0e631b8.d383b",
        "x": 250,
        "y": 2694,
        "wires": [
            [
                "41226553.28e86c"
            ]
        ]
    },
    {
        "id": "94ff4603.6d4ad8",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "8d4aab9b.4d6328",
        "order": 18,
        "width": 1,
        "height": 1,
        "name": "Nutriments B pump on/off state",
        "label": "<font color=\"{{msg.color}}\"><i class=\"fa fa-battery-half fa-1.5x\"></i></front>",
        "format": "",
        "layout": "row-spread",
        "x": 650,
        "y": 2694,
        "wires": []
    },
    {
        "id": "41226553.28e86c",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Set color",
        "func": "msg.color = (msg.payload == \"true\") ? global.get(\"color.widget.nutrients\") : \"grey\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 2694,
        "wires": [
            [
                "94ff4603.6d4ad8"
            ]
        ]
    },
    {
        "id": "610e2b65.b070d4",
        "type": "ui_template",
        "z": "1d22c714.e50369",
        "group": "8d4aab9b.4d6328",
        "name": "",
        "order": 1,
        "width": 4,
        "height": 3,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 680,
        "y": 2554,
        "wires": [
            []
        ]
    },
    {
        "id": "5e5c80d7.c23cb",
        "type": "template",
        "z": "1d22c714.e50369",
        "name": "Nutrients widget - status",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<md-card>\n  <div md-card-image class=\"example-header-image\"></div>\n  <md-card-content>\n    <p>\n      Every 6 hours, nutrients pump runs for <font color=\"{{global.color.widget.nutrients}}\"> {{global.nutriments.solutionA.pump.duration}} secs.</font>  \n      when PPM is below  <font color=\"{{global.color.widget.nutrients}}\">{{global.minPPM}}</font>\n    </p>\n  </md-card-content>\n</md-card>",
        "output": "str",
        "x": 490,
        "y": 2554,
        "wires": [
            [
                "610e2b65.b070d4"
            ]
        ]
    },
    {
        "id": "ae81222a.8201",
        "type": "inject",
        "z": "1d22c714.e50369",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 2554,
        "wires": [
            [
                "5e5c80d7.c23cb"
            ]
        ]
    },
    {
        "id": "de2dff01.cd507",
        "type": "inject",
        "z": "1d22c714.e50369",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 230,
        "y": 2820,
        "wires": [
            [
                "4d67ced7.a6caa"
            ]
        ]
    },
    {
        "id": "4d67ced7.a6caa",
        "type": "ui_artlessgauge",
        "z": "1d22c714.e50369",
        "group": "8d4aab9b.4d6328",
        "order": 14,
        "width": 2,
        "height": 1,
        "name": "Solution A - remaining days gauge",
        "icon": "",
        "label": "",
        "unit": "days left",
        "layout": "linear",
        "decimals": 0,
        "differential": false,
        "minmax": false,
        "colorTrack": "#555555",
        "style": "20,10,round",
        "colorFromTheme": true,
        "property": "payload",
        "secondary": "secondary",
        "inline": false,
        "sectors": [
            {
                "val": 0,
                "col": "#bb86fc",
                "t": "min",
                "dot": 0
            },
            {
                "val": 5,
                "col": "#bb86fc",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 10,
                "col": "#bb86fc",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 25,
                "col": "#bb86fc",
                "t": "max",
                "dot": 0
            }
        ],
        "lineWidth": "5",
        "bgcolorFromTheme": true,
        "diffCenter": "",
        "x": 440,
        "y": 2820,
        "wires": []
    },
    {
        "id": "8944b818.cab738",
        "type": "comment",
        "z": "1d22c714.e50369",
        "name": "##TODO compute remaining days",
        "info": "",
        "x": 300,
        "y": 2774,
        "wires": []
    },
    {
        "id": "d8de2deb.a328c",
        "type": "inject",
        "z": "1d22c714.e50369",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "25",
        "payloadType": "num",
        "x": 210,
        "y": 2874,
        "wires": [
            [
                "a56914d1.b859b8"
            ]
        ]
    },
    {
        "id": "a56914d1.b859b8",
        "type": "ui_artlessgauge",
        "z": "1d22c714.e50369",
        "group": "8d4aab9b.4d6328",
        "order": 19,
        "width": 2,
        "height": 1,
        "name": "Solution B - remaining days gauge",
        "icon": "",
        "label": "",
        "unit": "days left",
        "layout": "linear",
        "decimals": 0,
        "differential": false,
        "minmax": false,
        "colorTrack": "#555555",
        "style": "20,10, round",
        "colorFromTheme": true,
        "property": "payload",
        "secondary": "secondary",
        "inline": false,
        "sectors": [
            {
                "val": 0,
                "col": "#bb86fc",
                "t": "min",
                "dot": 0
            },
            {
                "val": 5,
                "col": "#bb86fc",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 10,
                "col": "#bb86fc",
                "t": "sec",
                "dot": 0
            },
            {
                "val": 25,
                "col": "#bb86fc",
                "t": "max",
                "dot": 0
            }
        ],
        "lineWidth": "5",
        "bgcolorFromTheme": true,
        "diffCenter": "",
        "x": 438,
        "y": 2875,
        "wires": []
    },
    {
        "id": "80ecf0e1.ea61b",
        "type": "link in",
        "z": "1d22c714.e50369",
        "name": "",
        "links": [
            "45c5f9a0.355c58",
            "1b0ae6f9.985959"
        ],
        "x": 315,
        "y": 2514,
        "wires": [
            [
                "5e5c80d7.c23cb"
            ]
        ]
    },
    {
        "id": "39f4667d.55b9da",
        "type": "mqtt in",
        "z": "87cb301d.9893c",
        "name": "",
        "topic": "hydro/lamp/s",
        "qos": "0",
        "datatype": "auto",
        "broker": "a0e631b8.d383b",
        "x": 610,
        "y": 213,
        "wires": [
            [
                "d7d0c829.e9cc28"
            ]
        ]
    },
    {
        "id": "a94198ff.eef948",
        "type": "ui_text",
        "z": "87cb301d.9893c",
        "group": "45199dde.854f64",
        "order": 11,
        "width": 1,
        "height": 1,
        "name": "LED on/off state",
        "label": "<font color=\"{{msg.color}}\"><i class=\"fa  fa-lightbulb-o fa-2x\"></i></front>",
        "format": "",
        "layout": "row-right",
        "x": 980,
        "y": 213,
        "wires": []
    },
    {
        "id": "6de36e52.d849c",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Configure hours sectors",
        "func": "function getSecondsSinceMidnight(timestamp) {   \n    \n    return new Date(timestamp).getHours() * 3600 +\n           new Date(timestamp).getMinutes() * 60 +\n           new Date(timestamp).getSeconds();\n}\n\nvar sunrise = getSecondsSinceMidnight(global.get('sunrise.timestamp'));\nvar sunset = getSecondsSinceMidnight(global.get('sunset.timestamp'));\nvar endLed = getSecondsSinceMidnight(global.get('seedTray.led.timer.off'));\n\nvar newSectors = [\n    {t:\"min\",val:sunrise,col:\"#FF7F18\",dot:0},\n    {t:\"sec\",val:sunset,col:\"#F3DF5E\",dot:0},\n    {t:\"sec\",val:endLed,col:\"#F3DF5E\",dot:0},\n    {t:\"max\",val:sunrise+24*3600,col:\"grey\",dot:0}] \n\n\nmsg.control = \n  {sectors:newSectors}\n  \nmsg.payload = getSecondsSinceMidnight(Date.now()) + 24*60*60;\n\nmsg.label = \"12h30\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "d773ba07.879918",
        "type": "inject",
        "z": "1d22c714.e50369",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "50",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 2180,
        "wires": [
            [
                "6de36e52.d849c"
            ]
        ]
    },
    {
        "id": "71624601.36eb68",
        "type": "ui_template",
        "z": "1d22c714.e50369",
        "group": "65d119b5.66cb78",
        "name": "Water PH scale",
        "order": 4,
        "width": 7,
        "height": 2,
        "format": "\n\n  <svg id=\"meter\">\n\n\n    <g ng-repeat=\"(key, value) in phScale\">\n      \n      <rect x=\"{{value.xpos}}\" \n           y=\"{{value.ypos}}\"\n           width=\"{{value.width}}\" height=\"{{value.height}}\" style=\"fill:{{value.hexColor}}\"  />\n       \n       <text x=\"{{value.xpos+value.width/2}}\" y=\"{{value.ypos+value.height/2}}\" dominant-baseline=\"central\" text-anchor=\"middle\"\n            font-size=\"14\" stroke-width=\"0\" stroke=\"#000\"\n            fill=\"#f9fcfb\" font-family=\"Montserrat\" font-weight=\"bold\">{{value.title}}</text>\n    </g>\n    \n    <polyline fill=\"none\" stroke=\"#389f76\" stroke-width=\"2\" \n            points=\"{{sectorXMinPH}},{{sectorPhY-2}} \n                    {{sectorXMinPH}},{{sectorPhY-6}} \n                    {{sectorXMaxPH}},{{sectorPhY-6}} \n                    {{sectorXMaxPH}},{{sectorPhY-2}}\" />\n    <g>               \n        <polygon fill=\"{{currentPhColor}}\" stroke=\"{{currentPhColor}}\" stroke-width=\"1\" \n            points=\"{{XcurrentPH}},{{YcurrentPH}}\n                    {{XcurrentPH-triangleSize}},{{YcurrentPH+triangleSize}}\n                    {{XcurrentPH+triangleSize}},{{YcurrentPH+triangleSize}}\"/>\n\n         <text x=\"{{XcurrentPH}}\" y=\"{{YcurrentPH+triangleSize}}\" \n                baseline-shift=\"-23px\" \n                text-anchor=\"middle\"\n                fill=\"{{currentPhColor}}\" font-family=\"Montserrat\" \n                font-size=\"1.5em\" >{{currentPHValue}}\n                \n        </text>\n        \n        <text x=\"{{XcurrentPH}}\" y=\"{{YcurrentPH+triangleSize}}\" \n              dx=\"9%\" baseline-shift=\"-23px\"  text-anchor=\"start\" \n              alignment-baseline=\"bottom\" fill=\"{{currentPhColor}}\" \n              font-size=\"1em\" font-family=\"Montserrat\">{{currentPhStatus}}</text>\n       \n    </g> \n  </svg>\n\n\n<script>\n    \n(function(scope) {\n    \n     scope.phScale = \n        [{\n            \"title\": \"1\",\n            \"hexColor\": \"#ec5656\",\n            \"level\": \"Acidic\"\n        }, \n        {  \n            \"title\": \"2\",\n            \"hexColor\": \"#f49a50\",\n            \"level\": \"Acidic\"\n        },\n        {\n            \"title\": \"3\",\n            \"hexColor\": \"#f2c957\",\n            \"level\": \"Acidic\"\n        },\n        {  \n            \"title\": \"4\",\n            \"hexColor\": \"#9dc248\",\n            \"level\": \"Acidic\"\n        },\n        {  \n            \"title\": \"5\",\n            \"hexColor\": \"#1dae68\",\n            \"level\": \"Acidic\"\n        },\n        {  \n            \"title\": \"6\",\n            \"hexColor\": \"#4bb752\",\n            \"level\": \"Acidic\"\n        },\n        {  \n            \"title\": \"7\",\n            \"hexColor\": \"#3d9e7a\",\n            \"level\": \"Neutral\"\n        },\n        {  \n            \"title\": \"8\",\n            \"hexColor\": \"#316784\",\n            \"level\": \"Base\"\n        },\n        {  \n            \"title\": \"9\",\n            \"hexColor\": \"#325aa9\",\n            \"level\": \"Base\"\n        },\n        {  \n            \"title\": \"10\",\n            \"hexColor\": \"#9a53dd\",\n            \"level\": \"Base\"\n        },\n        {  \n            \"title\": \"11+\",\n            \"hexColor\": \"#571f82\",\n            \"level\": \"Base\"\n        }]; \n    \n    // $watch fires each time the node is triggered in the flow\n    scope.$watch('msg', function(msg) {\n        \n        if (msg) {\n            \n            var phWidth = 25, phHeight = 25;\n            var phInitialPadding = 25;\n            var phSpacing = 3;\n            var phYpos = 15;\n            \n            \n            angular.forEach(scope.phScale, function (value, key) {\n                \n                value[\"xpos\"] = key * phWidth + key * phSpacing + phInitialPadding;\n                value[\"ypos\"] = phYpos;\n                value[\"width\"] = phWidth; \n                value[\"height\"]= phHeight; \n                \n            });\n            \n            var sectorMinPh = msg.minPH;\n            var sectorMaxPh = msg.maxPH;\n            \n            if (sectorMaxPh >= 12) {\n                sectorMaxPh = 11.9;\n            }\n            \n            \n            scope.sectorXMinPH = (Math.floor(sectorMinPh)-1) * phWidth + (Math.floor(sectorMinPh)-1) * phSpacing + phInitialPadding + ((sectorMinPh % 1) * phWidth);\n            scope.sectorXMaxPH = (Math.floor(sectorMaxPh)-1) * phWidth + (Math.floor(sectorMaxPh)-1) * phSpacing + phInitialPadding + ((sectorMaxPh % 1) * phWidth);\n            scope.sectorPhY = phYpos;\n            \n            // Find PH or default to 7 (it happens when updating min or max PH sectors)\n            scope.currentPHValue = (msg.payload) ? Number.parseFloat(msg.payload).toFixed(2) : 7;\n            scope.XcurrentPH = (Math.floor(scope.currentPHValue)-1) * phWidth + (Math.floor(scope.currentPHValue)-1) * phSpacing + phInitialPadding + ((scope.currentPHValue % 1) * phWidth);\n            scope.YcurrentPH = phYpos + phHeight + 5;\n            scope.triangleSize = 4;\n            \n    \n            if (scope.currentPHValue >= sectorMinPh && scope.currentPHValue <= sectorMaxPh) { \n                scope.currentPhStatus = \"Optimal\";\n                scope.currentPhColor = \"#42a37a\";\n            } else {\n                scope.currentPhStatus = scope.phScale[Math.floor(scope.currentPHValue) + 1][\"level\"];\n                scope.currentPhColor = \"#ec3d49\";\n            }\n            \n            \n        }\n    });\n    \n})(scope);\n\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1080,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "eb2d470b.714558",
        "type": "comment",
        "z": "1d22c714.e50369",
        "name": "##TODO SVG to repreent sunrise, led and moon",
        "info": "",
        "x": 410,
        "y": 2160,
        "wires": []
    },
    {
        "id": "ea0e311d.857dc",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Pass min and max PH (global var)",
        "func": "msg.minPH = global.get('minPH') || 0;\nmsg.maxPH = global.get('maxPH') || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 1120,
        "wires": [
            [
                "71624601.36eb68"
            ]
        ]
    },
    {
        "id": "d8805062.990f5",
        "type": "link in",
        "z": "1d22c714.e50369",
        "name": "Push new min and max PH",
        "links": [
            "4bc5ba0b.116334",
            "f334d767.83e348"
        ],
        "x": 655,
        "y": 1060,
        "wires": [
            [
                "ea0e311d.857dc"
            ]
        ]
    },
    {
        "id": "d7d0c829.e9cc28",
        "type": "function",
        "z": "87cb301d.9893c",
        "name": "Set LED icon color",
        "func": "msg.color = (msg.payload == \"true\") ? global.get('color.widget.light.led') : \"grey\";\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 213,
        "wires": [
            [
                "a94198ff.eef948"
            ]
        ]
    },
    {
        "id": "1b85a90a.07a897",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "6c15eb0d.8f5814",
        "order": 8,
        "width": 4,
        "height": 1,
        "name": "Water control label",
        "label": "<b><i class=\"fa fa-cog\"></i> Control</b>",
        "format": "",
        "layout": "row-left",
        "x": 750,
        "y": 1846,
        "wires": []
    },
    {
        "id": "ba791300.7ab1",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "8d4aab9b.4d6328",
        "order": 9,
        "width": 4,
        "height": 1,
        "name": "Nutrients control label",
        "label": "<b><i class=\"fa fa-cog\"></i> Control</b>",
        "format": "",
        "layout": "row-left",
        "x": 760,
        "y": 1886,
        "wires": []
    },
    {
        "id": "933e05f4.0abbb8",
        "type": "ui_switch",
        "z": "87cb301d.9893c",
        "name": "Water pump",
        "label": "Water pump",
        "tooltip": "",
        "group": "6c15eb0d.8f5814",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "fa-toggle-on fa-2x",
        "oncolor": "#0077be",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "fa-toggle-off fa-2x",
        "offcolor": "#0077be",
        "x": 610,
        "y": 459,
        "wires": [
            [
                "da7d1a1e.239e58",
                "d579d391.622e6"
            ]
        ]
    },
    {
        "id": "2f179774.4055e8",
        "type": "function",
        "z": "87cb301d.9893c",
        "name": "Save state and set color",
        "func": "global.set(\"settings.water_pump.activated\", msg.payload.relay_state);\n\nmsg.color = (msg.payload.relay_state == 1) ? global.get(\"color.widget.water\") : \"grey\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1154,
        "y": 461,
        "wires": [
            [
                "ea84252f.eb1ee8"
            ]
        ]
    },
    {
        "id": "ea84252f.eb1ee8",
        "type": "ui_text",
        "z": "87cb301d.9893c",
        "group": "6c15eb0d.8f5814",
        "order": 11,
        "width": 1,
        "height": 1,
        "name": "Water pump on/off state",
        "label": "<font color=\"{{msg.color}}\"><i class=\"fa fa-tint fa-2x\"></i></front>",
        "format": "",
        "layout": "row-spread",
        "x": 1390,
        "y": 460,
        "wires": []
    },
    {
        "id": "b5b54050.b692c",
        "type": "ui_text",
        "z": "1d22c714.e50369",
        "group": "45199dde.854f64",
        "order": 7,
        "width": 4,
        "height": 1,
        "name": "Lights control label",
        "label": "<b><i class=\"fa fa-cog\"></i> Control</b>",
        "format": "",
        "layout": "row-left",
        "x": 970,
        "y": 1860,
        "wires": []
    },
    {
        "id": "6921fbdb.48e634",
        "type": "ui_template",
        "z": "1d22c714.e50369",
        "g": "9c4443bb.0420a",
        "group": "1c37dc0b.ce28e4",
        "name": "Header - menu buttons",
        "order": 6,
        "width": 4,
        "height": 1,
        "format": "\n<script id=\"TopHeader\" type=\"text/javascript\">\n\nvar home = new Object();\nhome.payload = 'Hydroponic'; // This is the payload that goes out\n    \nvar schedule = new Object();\nschedule.payload = 'Schedule'; // This is the payload that goes out\n    \nvar setting = new Object();\nsetting.payload = 'Setting'; // This is the payload that goes out\n\nvar graph = new Object();\ngraph.payload = 'Graph'; // This is the payload that goes out\n    \nvar theScope = scope;\nelementsAdded = false;\n    \n$(function (scope) {\n    \n    if (scope.elementsAdded) {\n        console.log(\"elements already added. exit.\");\n        return;\n    }\n    \n    scope.elementsAdded = true;\n    \n    // add button\n    var divButtons = $('<div />');\n    divButtons[0].style.position=\"absolute\";\n    divButtons[0].style.right = \"5%\";\n    \n    var homeButton = document.createElement(\"button\");\n    homeButton.className += \"md-icon-button md-button md-ink-ripple\";\n    homeButton.innerHTML = '<i class=\"fa fa-tachometer\" aria-hidden=\"true\"></i>';\n    homeButton.addEventListener(\"click\", doIT.bind(null,home));\n    homeButton.style.margin = '5px';\n    divButtons.append(homeButton);\n    \n     // add agenda button\n    var agendaButton = document.createElement(\"button\");\n    agendaButton.className += \"md-icon-button md-button md-ink-ripple\";\n    agendaButton.innerHTML = '<i class=\"fa fa-calendar\" aria-hidden=\"true\"></i>';\n    agendaButton.addEventListener(\"click\", doIT.bind(null,schedule));\n    agendaButton.style.margin = '5px';\n    divButtons.append(agendaButton);\n   \n        \n    // add Graph button\n    var graphButton = document.createElement(\"button\");\n    graphButton.className += \"md-icon-button md-button md-ink-ripple\";\n    graphButton.innerHTML = '<i class=\"fa fa-area-chart\" aria-hidden=\"true\"></i>';\n    graphButton.addEventListener(\"click\", doIT.bind(null,graph));\n    graphButton.style.margin = '5px';\n    divButtons.append(graphButton);\n    \n    // add button\n    var settingsButton = document.createElement(\"button\");\n    settingsButton.className += \"md-icon-button md-button md-ink-ripple\";\n    settingsButton.innerHTML = '<i class=\"fa fa-sliders\" aria-hidden=\"true\"></i>';\n    settingsButton.addEventListener(\"click\", doIT.bind(null,setting));\n    settingsButton.style.margin = '5px';\n    divButtons.append(settingsButton);\n\n    \n    var toolbar = $('#nr-dashboard-toolbar');\n    if(!toolbar.length) return;\n\n\n    toolbar.append(divButtons);  \n\n    \n    function doIT(m){\n        theScope.send( m )\n    }\n\n    function doThis(m){\n        theScope.send( m )\n    }\n\n});\n    \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 250,
        "y": 180,
        "wires": [
            [
                "27f25225.1ccc9e",
                "4966b810.210668",
                "c142bf5f.eb819",
                "ccfb9c89.f2c45"
            ]
        ]
    },
    {
        "id": "27f25225.1ccc9e",
        "type": "ui_ui_control",
        "z": "1d22c714.e50369",
        "g": "9c4443bb.0420a",
        "name": "go to settings",
        "events": "change",
        "x": 520,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4966b810.210668",
        "type": "ui_ui_control",
        "z": "1d22c714.e50369",
        "g": "9c4443bb.0420a",
        "name": "go to Graph",
        "events": "change",
        "x": 510,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c142bf5f.eb819",
        "type": "ui_ui_control",
        "z": "1d22c714.e50369",
        "g": "9c4443bb.0420a",
        "name": "go to Hydroponic",
        "events": "change",
        "x": 530,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ccfb9c89.f2c45",
        "type": "ui_ui_control",
        "z": "1d22c714.e50369",
        "g": "9c4443bb.0420a",
        "name": "go to Schedule",
        "events": "change",
        "x": 520,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "85c3e511.6fbc68",
        "type": "comment",
        "z": "1d22c714.e50369",
        "g": "9c4443bb.0420a",
        "name": "UI header - menu buttons",
        "info": "",
        "x": 250,
        "y": 140,
        "wires": []
    },
    {
        "id": "1516235d.d1ebfd",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "\nglobal.set('minPPM',msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9b926b5.9115898",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "\nglobal.set('maxPPM',msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3f752648.74e6ca",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "minPPMValue",
        "storageNode": "217cc961.603ce6",
        "x": 740,
        "y": 360,
        "wires": []
    },
    {
        "id": "9146934f.83cb1",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "minPPMValue",
        "storageNode": "217cc961.603ce6",
        "x": 300,
        "y": 340,
        "wires": [
            [
                "a65a3b1b.47fc98"
            ]
        ]
    },
    {
        "id": "b7985833.9fdba8",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "maxPPMValue",
        "storageNode": "217cc961.603ce6",
        "x": 740,
        "y": 440,
        "wires": []
    },
    {
        "id": "a5cee59.fa0fd18",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "maxPPMValue",
        "storageNode": "217cc961.603ce6",
        "x": 300,
        "y": 420,
        "wires": [
            [
                "141d0c8a.d98be3"
            ]
        ]
    },
    {
        "id": "7bcd1b8c.9818e4",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "\nglobal.set('minPH',msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "982fabd3.e49df8",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "\nglobal.set('maxPH',msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "71390326.464c4c",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "minPHValue",
        "storageNode": "217cc961.603ce6",
        "x": 710,
        "y": 620,
        "wires": []
    },
    {
        "id": "e8398002.767f4",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "minPHValue",
        "storageNode": "217cc961.603ce6",
        "x": 290,
        "y": 600,
        "wires": [
            [
                "f6b1cbb0.3cd9e8"
            ]
        ]
    },
    {
        "id": "80f40634.689f48",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "maxPHValue",
        "storageNode": "217cc961.603ce6",
        "x": 710,
        "y": 700,
        "wires": []
    },
    {
        "id": "3cd6faa8.f9bab6",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "maxPHValue",
        "storageNode": "217cc961.603ce6",
        "x": 290,
        "y": 680,
        "wires": [
            [
                "dd9cce6b.677ad"
            ]
        ]
    },
    {
        "id": "5b859dcf.f2f8f4",
        "type": "comment",
        "z": "9441712c.a6198",
        "name": "### System variable configuration",
        "info": "",
        "x": 280,
        "y": 260,
        "wires": []
    },
    {
        "id": "1b0ae6f9.985959",
        "type": "link out",
        "z": "9441712c.a6198",
        "name": "Min PPM value updated",
        "links": [
            "80ecf0e1.ea61b"
        ],
        "x": 655,
        "y": 280,
        "wires": []
    },
    {
        "id": "f334d767.83e348",
        "type": "link out",
        "z": "9441712c.a6198",
        "name": "",
        "links": [
            "d8805062.990f5"
        ],
        "x": 595,
        "y": 640,
        "wires": []
    },
    {
        "id": "dd9cce6b.677ad",
        "type": "ui_numeric",
        "z": "9441712c.a6198",
        "name": "Max. PH",
        "label": "<i class=\"fa fa-arrow-circle-down\"></i> Max. PH",
        "tooltip": "Maximum PH threshold to trigger event",
        "group": "1c4b8cb2.e1e2e3",
        "order": 6,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "PH max value numeric input",
        "format": "{{value}}",
        "min": 0,
        "max": "14",
        "step": "0.1",
        "x": 480,
        "y": 680,
        "wires": [
            [
                "f334d767.83e348",
                "982fabd3.e49df8",
                "80f40634.689f48"
            ]
        ]
    },
    {
        "id": "f6b1cbb0.3cd9e8",
        "type": "ui_numeric",
        "z": "9441712c.a6198",
        "name": "Min. PH",
        "label": "<i class=\"fa fa-arrow-circle-up\"></i> Min. PH",
        "tooltip": "Minimum PH threshold to trigger event",
        "group": "1c4b8cb2.e1e2e3",
        "order": 3,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "Min. PH value",
        "format": "{{value}}",
        "min": 0,
        "max": "14",
        "step": "0.1",
        "x": 480,
        "y": 600,
        "wires": [
            [
                "7bcd1b8c.9818e4",
                "71390326.464c4c",
                "f334d767.83e348"
            ]
        ]
    },
    {
        "id": "a65a3b1b.47fc98",
        "type": "ui_numeric",
        "z": "9441712c.a6198",
        "name": "Min. PPM numeric input",
        "label": "<i class=\"fa fa-arrow-circle-up\"></i> Min. PPM",
        "tooltip": "Min PPM threshold to trigger event",
        "group": "1c4b8cb2.e1e2e3",
        "order": 10,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "step": "100",
        "x": 510,
        "y": 340,
        "wires": [
            [
                "1516235d.d1ebfd",
                "3f752648.74e6ca",
                "1b0ae6f9.985959"
            ]
        ]
    },
    {
        "id": "141d0c8a.d98be3",
        "type": "ui_numeric",
        "z": "9441712c.a6198",
        "name": "Max. PPM numeric input",
        "label": "<i class=\"fa fa-arrow-circle-down\"></i> Max. PPM",
        "tooltip": "Max PPM threshold to trigger event",
        "group": "1c4b8cb2.e1e2e3",
        "order": 13,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "step": "100",
        "x": 510,
        "y": 420,
        "wires": [
            [
                "9b926b5.9115898",
                "b7985833.9fdba8"
            ]
        ]
    },
    {
        "id": "18d6c45d.7ab59c",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "1c4b8cb2.e1e2e3",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "Nutrients settings",
        "label": "<b><i class=\"fa fa-sliders\"></i> Nutrients </b>",
        "format": "",
        "layout": "row-left",
        "x": 250,
        "y": 300,
        "wires": []
    },
    {
        "id": "d7136115.91c37",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "1c4b8cb2.e1e2e3",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "PH settings",
        "label": "<b><i class=\"fa fa-sliders\"></i> PH </b>",
        "format": "",
        "layout": "row-left",
        "x": 230,
        "y": 560,
        "wires": []
    },
    {
        "id": "527c695b.4fdf98",
        "type": "ui_slider",
        "z": "9441712c.a6198",
        "name": "Water spray duration",
        "label": "<i class=\"fa fa-clock-o\"></i>",
        "tooltip": "Water spray duration",
        "group": "1c4b8cb2.e1e2e3",
        "order": 31,
        "width": 4,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": "0",
        "max": "60",
        "step": "5",
        "x": 480,
        "y": 840,
        "wires": [
            [
                "507ee2f6.516eec",
                "4daaa0a0.02a9a",
                "4cc660a2.d792",
                "3339466d.6d58aa"
            ]
        ]
    },
    {
        "id": "507ee2f6.516eec",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "1c4b8cb2.e1e2e3",
        "order": 32,
        "width": 1,
        "height": 1,
        "name": "Water spray duration ",
        "label": "",
        "format": "{{msg.payload}} sec.",
        "layout": "row-center",
        "x": 720,
        "y": 821,
        "wires": []
    },
    {
        "id": "4daaa0a0.02a9a",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "\nglobal.set('durationWaterSpray',msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 861,
        "wires": [
            []
        ]
    },
    {
        "id": "4cc660a2.d792",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "waterSprayTimer",
        "storageNode": "217cc961.603ce6",
        "x": 710,
        "y": 901,
        "wires": []
    },
    {
        "id": "49af6c92.3da8a4",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "waterSprayTimer",
        "storageNode": "217cc961.603ce6",
        "x": 270,
        "y": 840,
        "wires": [
            [
                "527c695b.4fdf98"
            ]
        ]
    },
    {
        "id": "fc1cbcae.827d",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "1c4b8cb2.e1e2e3",
        "order": 29,
        "width": 0,
        "height": 0,
        "name": "Water spray setting",
        "label": "<b><i class=\"fa fa-sliders\"></i> Seed tray - Water spray </b>",
        "format": "",
        "layout": "row-left",
        "x": 250,
        "y": 780,
        "wires": []
    },
    {
        "id": "2229125e.9cc0de",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "global.set('seed.totalLight',msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "c231a613.adbd18",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "seed.totalLight",
        "storageNode": "217cc961.603ce6",
        "x": 820,
        "y": 1240,
        "wires": []
    },
    {
        "id": "304a2fa1.758d7",
        "type": "link out",
        "z": "9441712c.a6198",
        "name": "Change total light slider",
        "links": [
            "3dfc5ff2.440c6"
        ],
        "x": 755,
        "y": 1160,
        "wires": []
    },
    {
        "id": "57d5c94c.049dc8",
        "type": "ui_numeric",
        "z": "9441712c.a6198",
        "name": "Total light",
        "label": "<i class=\"fa fa-clock-o\"> Daily light</i>",
        "tooltip": "",
        "group": "1c4b8cb2.e1e2e3",
        "order": 36,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}} h.",
        "min": 0,
        "max": "24",
        "step": 1,
        "x": 640,
        "y": 1200,
        "wires": [
            [
                "304a2fa1.758d7",
                "2229125e.9cc0de",
                "c231a613.adbd18"
            ]
        ]
    },
    {
        "id": "5ae3f27b.9d6a9c",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Configure widget",
        "func": "var minValue = global.get('sun.total') || 1;\nmsg.ui_control = {\"min\":Math.floor(minValue/3600)+1};\n\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 1200,
        "wires": [
            [
                "57d5c94c.049dc8"
            ]
        ]
    },
    {
        "id": "35ea3272.82355e",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "seed.totalLight",
        "storageNode": "217cc961.603ce6",
        "x": 260,
        "y": 1200,
        "wires": [
            [
                "5ae3f27b.9d6a9c"
            ]
        ]
    },
    {
        "id": "bb11a03a.365f2",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "1c4b8cb2.e1e2e3",
        "order": 34,
        "width": 0,
        "height": 0,
        "name": "Seed tray - total light setting",
        "label": "<b><i class=\"fa fa-sliders\"></i> Seed Tray - Total light </b>",
        "format": "",
        "layout": "row-left",
        "x": 280,
        "y": 1140,
        "wires": []
    },
    {
        "id": "48d7f256.20251c",
        "type": "ui_slider",
        "z": "9441712c.a6198",
        "name": "Nutriments solution A pump duration slider",
        "label": "<i class=\"fa fa-clock-o\"></i>",
        "tooltip": "Nutriments pump duration",
        "group": "1c4b8cb2.e1e2e3",
        "order": 17,
        "width": 4,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": "1",
        "max": "30",
        "step": 1,
        "x": 610,
        "y": 1360,
        "wires": [
            [
                "af36d027.bab06",
                "96fa6ce2.9f802",
                "4bd2e2e4.f0b2dc"
            ]
        ]
    },
    {
        "id": "af36d027.bab06",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "1c4b8cb2.e1e2e3",
        "order": 18,
        "width": 1,
        "height": 1,
        "name": "Nutriments sol. A timer ",
        "label": "",
        "format": "{{msg.payload}} sec.",
        "layout": "row-center",
        "x": 900,
        "y": 1320,
        "wires": []
    },
    {
        "id": "96fa6ce2.9f802",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "\nglobal.set('nutriments.solutionA.pump.duration',msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "4bd2e2e4.f0b2dc",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "nutrimentsSolutionATimer",
        "storageNode": "217cc961.603ce6",
        "x": 910,
        "y": 1400,
        "wires": []
    },
    {
        "id": "76032356.e1847c",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "nutrimentsSolutionATimer",
        "storageNode": "217cc961.603ce6",
        "x": 290,
        "y": 1360,
        "wires": [
            [
                "48d7f256.20251c"
            ]
        ]
    },
    {
        "id": "7c8c85b6.c030fc",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "1c4b8cb2.e1e2e3",
        "order": 15,
        "width": 0,
        "height": 0,
        "name": "Nutrients settings",
        "label": "<b><i class=\"fa fa-sliders\"></i> Nutrients pumps</b>",
        "format": "",
        "layout": "row-left",
        "x": 250,
        "y": 1300,
        "wires": []
    },
    {
        "id": "964e551c.a86e58",
        "type": "ui_slider",
        "z": "9441712c.a6198",
        "name": "Nutriments solution B pump duration slider",
        "label": "<i class=\"fa fa-clock-o\"></i>",
        "tooltip": "Nutriments pump duration",
        "group": "1c4b8cb2.e1e2e3",
        "order": 21,
        "width": 4,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": "1",
        "max": "30",
        "step": 1,
        "x": 610,
        "y": 1500,
        "wires": [
            [
                "214657c1.8f5c38",
                "f7bbc881.6f67d8",
                "4bb6cd3b.4abba4"
            ]
        ]
    },
    {
        "id": "214657c1.8f5c38",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "1c4b8cb2.e1e2e3",
        "order": 22,
        "width": 1,
        "height": 1,
        "name": "Nutriments sol. B timer ",
        "label": "",
        "format": "{{msg.payload}} sec.",
        "layout": "row-center",
        "x": 910,
        "y": 1500,
        "wires": []
    },
    {
        "id": "f7bbc881.6f67d8",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "global.set('nutriments.solutionB.pump.duration',msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "4bb6cd3b.4abba4",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "nutrimentsSolutionBTimer",
        "storageNode": "217cc961.603ce6",
        "x": 910,
        "y": 1576,
        "wires": []
    },
    {
        "id": "3aba810e.34fabe",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "nutrimentsSolutionBTimer",
        "storageNode": "217cc961.603ce6",
        "x": 290,
        "y": 1500,
        "wires": [
            [
                "964e551c.a86e58"
            ]
        ]
    },
    {
        "id": "4a2e6ba3.5a7ef4",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "c3776e2a.f6068",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Lettuces",
        "label": "<b><i class=\"fa fa-sliders\"></i> Lettuces</b>",
        "format": "",
        "layout": "row-left",
        "x": 240,
        "y": 1600,
        "wires": []
    },
    {
        "id": "962b5d8f.5b1c",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "global.set('crops.lettuce.schedule.germinated',msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "892b7308.9252e",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "crops.lettuce.schedule.germinated",
        "storageNode": "217cc961.603ce6",
        "x": 940,
        "y": 1700,
        "wires": []
    },
    {
        "id": "648d9af7.b6ea04",
        "type": "link out",
        "z": "9441712c.a6198",
        "name": "Change total light slider",
        "links": [
            "3dfc5ff2.440c6"
        ],
        "x": 815,
        "y": 1620,
        "wires": []
    },
    {
        "id": "806e5cc.38ef0a",
        "type": "ui_numeric",
        "z": "9441712c.a6198",
        "name": "Lettuce - Days to germinate",
        "label": "<i class=\"fa fa-clock-o\"></i> Germination time",
        "tooltip": "",
        "group": "c3776e2a.f6068",
        "order": 3,
        "width": 6,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}} days",
        "min": 0,
        "max": "30",
        "step": 1,
        "x": 620,
        "y": 1660,
        "wires": [
            [
                "648d9af7.b6ea04",
                "962b5d8f.5b1c",
                "892b7308.9252e"
            ]
        ]
    },
    {
        "id": "64d34a11.4b3384",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "crops.lettuce.schedule.germinated",
        "storageNode": "217cc961.603ce6",
        "x": 340,
        "y": 1660,
        "wires": [
            [
                "806e5cc.38ef0a"
            ]
        ]
    },
    {
        "id": "f702119a.8a2c2",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "global.set('crops.lettuce.schedule.transplant',msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "784c3ffe.5b6bd",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "crops.lettuce.schedule.transplant",
        "storageNode": "217cc961.603ce6",
        "x": 940,
        "y": 1820,
        "wires": []
    },
    {
        "id": "db6792a8.788f5",
        "type": "link out",
        "z": "9441712c.a6198",
        "name": "Change total light slider",
        "links": [
            "3dfc5ff2.440c6"
        ],
        "x": 815,
        "y": 1740,
        "wires": []
    },
    {
        "id": "99bc9475.951468",
        "type": "ui_numeric",
        "z": "9441712c.a6198",
        "name": "Lettuce - Days to transplant",
        "label": "<i class=\"fa fa-clock-o\"></i> Transplant time",
        "tooltip": "",
        "group": "c3776e2a.f6068",
        "order": 6,
        "width": 6,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}} days",
        "min": 0,
        "max": "30",
        "step": 1,
        "x": 620,
        "y": 1780,
        "wires": [
            [
                "db6792a8.788f5",
                "f702119a.8a2c2",
                "784c3ffe.5b6bd"
            ]
        ]
    },
    {
        "id": "e427c34e.15a1f",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "crops.lettuce.schedule.transplant",
        "storageNode": "217cc961.603ce6",
        "x": 340,
        "y": 1780,
        "wires": [
            [
                "99bc9475.951468"
            ]
        ]
    },
    {
        "id": "66ed85bf.4efe0c",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "global.set('crops.lettuce.schedule.harvest',msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 880,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "d12156.9e8a1ea8",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "crops.lettuce.schedule.harvest",
        "storageNode": "217cc961.603ce6",
        "x": 910,
        "y": 1960,
        "wires": []
    },
    {
        "id": "8a7ded76.20298",
        "type": "link out",
        "z": "9441712c.a6198",
        "name": "Change total light slider",
        "links": [
            "3dfc5ff2.440c6"
        ],
        "x": 795,
        "y": 1880,
        "wires": []
    },
    {
        "id": "d140b1b4.093d4",
        "type": "ui_numeric",
        "z": "9441712c.a6198",
        "name": "Lettuce - Days to harvest",
        "label": "<i class=\"fa fa-clock-o\"></i> Harvest time",
        "tooltip": "",
        "group": "c3776e2a.f6068",
        "order": 9,
        "width": 6,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}} days",
        "min": 0,
        "max": "45",
        "step": 1,
        "x": 590,
        "y": 1920,
        "wires": [
            [
                "8a7ded76.20298",
                "66ed85bf.4efe0c",
                "d12156.9e8a1ea8"
            ]
        ]
    },
    {
        "id": "c7dbd13a.0564d",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "crops.lettuce.schedule.harvest",
        "storageNode": "217cc961.603ce6",
        "x": 310,
        "y": 1920,
        "wires": [
            [
                "d140b1b4.093d4"
            ]
        ]
    },
    {
        "id": "bd43de44.263ff",
        "type": "ui_template",
        "z": "5e9d2991.0ea428",
        "group": "780009a1.cfbb18",
        "name": "Crops - My actions",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div layout=\"column\" style=\"max-height:350px\" ng-cloak>\n    \n      <md-toolbar md-scroll-shrink ng-if=\"true\">\n        <div class=\"md-toolbar-tools\">\n          <h3>\n            <span>Week activities </span>\n          </h3>\n        </div>\n      </md-toolbar>\n\n        <md-list flex>\n            \n            <!-- No action list -->\n            <md-list-item ng-show=\"(seedTrayState | filter: {'nextAction': '!!'}).length == 0 \n                && (NFTState | filter: {'nextAction': '!!'}).length == 0\">\n                \n                <div class=\"md-list-item-text\">\n                    <h4>No action.</h4>\n                </div>\n            </md-list-item>\n            \n            <!-- Harvest actions -->\n            <md-list-item ng-repeat=\"item in NFTState | filter: {'nextAction': '!!'}\">\n                <img src=\"{{item.iconAction}}\" class=\"md-avatar\" style=\"background-color: rgba(255,255,255,0.8);\" >\n                <div class=\"md-list-item-text\" ng-if=\"item.nextAction=='harvest'\">\n                    <h4>Harvest the {{item.category}}</h4>\n                    <p>Column {{item.column}}, row {{item.row}}</p>\n                </div>\n                \n                <md-menu class=\"md-secondary\" ng-show=\"item.nextAction=='harvest'\">\n                  <md-button class=\"icon-button\">\n                    <md-avatar ng-class=\"{'fa': true, 'fa-ellipsis-h': true}\"></md-avatar>\n                  </md-button>\n                  <md-menu-content width=\"4\">\n                    <md-menu-item ng-click=\"completeTask(item)\">\n                      <md-button>\n                        <md-avatar ng-class=\"{'fa': true, 'fa-check': true}\" ></md-avatar>\n                         Complete task\n                      </md-button>\n                    </md-menu-item>\n    \n                    <md-menu-item ng-click=\"reschedule(item)\">\n                      <md-button>\n                        <md-avatar ng-class=\"{'fa': true, 'fa-calendar-plus-o': true}\" ></md-avatar>\n                         Re-schedule to next week\n                      </md-button>\n                     </md-menu-item>\n                  </md-menu-content>\n                </md-menu>\n                <md-divider md-inset></md-divider>\n            </md-list-item>\n        \n            \n            <!--Plant seed and transplant action -->\n            <md-list-item ng-repeat=\"item in seedTrayState | filter: {'nextAction': '!!'}\">\n                <img src=\"{{item.iconAction}}\" class=\"md-avatar\" style=\"background-color: rgba(255,255,255,0.8);\" >\n                <div class=\"md-list-item-text\" ng-if=\"item.nextAction=='plantSeed'\">\n                    <h4>Plant a {{item.category}} seed</h4>\n                    <p>Seed tray - column {{item.column}}, row {{item.row}}</p>\n                </div>\n                <div class=\"md-list-item-text\" ng-if=\"item.nextAction=='transplant'\">\n                    <h4>Transplant {{item.category}}</h4>\n                    <p>From seed tray - ({{item.column}},{{item.row}})</p>\n                    <p ng-if=\"item.toNFTColumn\">To NFT - ({{item.toNFTColumn}},{{item.toNFTRow}})</p>\n                    <p ng-if=\"!item.toNFTColumn\"><i class=\"fa fa-warning\"> NFC system is full, harvest first.</i></p>\n             \n                </div>\n            \n                <md-menu class=\"md-secondary\" ng-show=\"item.nextAction=='plantSeed' || (item.nextAction=='transplant' && item.toNFTColumn)\">\n                  <md-button class=\"icon-button\">\n                    <md-avatar ng-class=\"{'fa': true, 'fa-ellipsis-h': true}\"></md-avatar>\n                  </md-button>\n                  <md-menu-content width=\"4\">\n                    <md-menu-item ng-click=\"completeTask(item)\">\n                      <md-button>\n                        <md-avatar ng-class=\"{'fa': true, 'fa-check': true}\" ></md-avatar>\n                         Complete task\n                      </md-button>\n                    </md-menu-item>\n    \n                    <md-menu-item ng-click=\"reschedule(item)\">\n                      <md-button>\n                        <md-avatar ng-class=\"{'fa': true, 'fa-calendar-plus-o': true}\" ></md-avatar>\n                         Re-schedule to next week\n                      </md-button>\n                    </md-menu-item>\n                    <md-menu-divider></md-menu-divider>\n                    <md-menu-item ng-click=\"\">\n                       <md-button >\n                        Change to tomatoe\n                      </md-button>\n                    </md-menu-item>\n                    <md-menu-item ng-click=\"\">\n                       <md-button>\n                        Change to mint\n                      </md-button>\n                    </md-menu-item>\n                     <md-menu-item ng-click=\"\">\n                       <md-button>\n                        Change to persley\n                      </md-button>\n                    </md-menu-item>\n                  </md-menu-content>\n                </md-menu>\n                <md-divider md-inset></md-divider>\n            </md-list-item>\n            \n    </md-list>\n</div>\n<script>\n    \n(function(scope) {\n    \n\n    // $watch fires each time the node is triggered in the flow\n    scope.$watch('msg', function(msg) {\n        \n        if (msg) {\n    \n            scope.seedTrayState = msg.seedTrayState;\n            scope.NFTState = msg.NFTState;\n            \n            \n            scope.completeTask = function(item) {\n                \n                if (item.nextAction === \"transplant\") {\n                    \n                    var index =  scope.seedTrayState.indexOf(item);\n                    \n                    //Keep a copy the element stored in seed tray, for NFT generation\n                    let copy =JSON.parse(JSON.stringify(scope.seedTrayState[index]));\n                    \n                    scope.seedTrayState.splice(index,1);\n                    var newItem = {\n                        column: item.column,\n                        row: item.row, \n                        category: \"empty\"\n                    }\n                    \n                    scope.seedTrayState.push(newItem);\n                    scope.send({seedTrayState: scope.seedTrayState});\n                    \n                    \n                    var indexNewItem = scope.NFTState.indexOf(\n                            scope.NFTState.find(cell => cell.column === item.toNFTColumn && cell.row === item.toNFTRow)\n                    );\n                    \n                    \n                    // remove old item\n                    scope.NFTState.splice(indexNewItem,1);\n                    \n                   \n                    copy.column = item.toNFTColumn;\n                    copy.row = item.toNFTRow;\n                    copy.iconAction = \"\";\n                    copy.nextAction = undefined;\n                    copy.toNFTColumn = undefined;\n                    copy.toNFTRow = undefined;\n                    \n                    scope.NFTState.push(copy);\n                    \n                    //Update Seed Tray and NFTStateobject \n                    scope.send({NFTState: scope.NFTState});\n               \n                    \n                    \n                } else if (item.nextAction === \"plantSeed\") {\n                    \n                    var index =  scope.seedTrayState.indexOf(item);\n     \n                    //Copy the element\n                    let copy =JSON.parse(JSON.stringify(scope.seedTrayState[index]));\n                    \n                    // Update properties\n                    copy.iconAction = undefined;\n                    copy.nextAction = undefined;\n                    copy.category = \"salad\";\n                    \n                    var today = new Date();\n                    copy.seedPlantedDate = today.getFullYear() + \"-\" + today.getMonth()+1 + \"-\" + today.getDate();\n                    \n                    var germinationDate = new Date();\n                    germinationDate.setDate(today.getDate() + msg.lettuceDaysForGermination);\n                    copy.germinationDate = germinationDate.getFullYear() + \"-\" + (germinationDate.getMonth()+1) + \"-\" + germinationDate.getDate() ;\n                    \n                    var transplantDate = new Date();\n                    transplantDate.setDate(today.getDate() + msg.lettuceDaysForTransplant);\n                    copy.transplantDate = transplantDate.getFullYear() + \"-\" + (transplantDate.getMonth()+1) + \"-\" + transplantDate.getDate();\n                   \n                    var harvestDate = new Date();\n                    harvestDate.setDate(today.getDate() + msg.lettuceDaysForHarvest);\n                    copy.harvestDate = harvestDate.getFullYear() + \"-\" + (harvestDate.getMonth()+1) + \"-\" + harvestDate.getDate();\n                   \n                    // Remove \"old\" item\n                    scope.seedTrayState.splice(index,1);\n                    // Push the copy\n                    scope.seedTrayState.push(copy);\n                    \n                    scope.send({seedTrayState: scope.seedTrayState});\n                    \n                    \n                }\n                \n                if (item.nextAction === \"harvest\") {\n                    \n                    var index =  scope.NFTState.indexOf(item);\n                    scope.NFTState.splice(index,1);\n                    var newItem = {\n                        column: item.column,\n                        row: item.row, \n                        category: \"empty\"\n                    }\n                    \n                    scope.NFTState.push(newItem);\n                    //Update Seed Tray object \n                    scope.send({NFTState: scope.NFTState});\n                    \n                    \n                }\n            };\n            \n                        \n            scope.reschedule = function(item) {\n                \n                if (item.nextAction === \"transplant\") {\n                    // TODO never tested. \n                    \n                    var index =  scope.seedTrayState.indexOf(item);\n                    \n                    //Keep a copy the element stored in seed tray, for NFT generation\n                    let copy =JSON.parse(JSON.stringify(scope.seedTrayState[index]));\n                    \n                    scope.seedTrayState.splice(index,1);\n                    \n                    // Add 7 days\n                    var rescheduldedDate = new Date();\n                    rescheduldedDate.setTime(Date.parse(copy.transplantDate) + (7 * 24 * 60 * 60 * 1000));\n                    \n                    //Update transplantDate with date+ 7days \n                    copy.transplantDate = rescheduldedDate.getFullYear() + \"-\" + (rescheduldedDate.getMonth()+1) + \"-\" + rescheduldedDate.getDate();\n                   \n                    scope.seedTrayState.push(copy);\n                    scope.send({seedTrayState: scope.seedTrayState});\n                    \n                } else if (item.nextAction === \"plantSeed\") {\n                    \n                    var index =  scope.seedTrayState.indexOf(item);\n     \n                    //Copy the element\n                    let copy =JSON.parse(JSON.stringify(scope.seedTrayState[index]));\n                    \n                    // Update properties\n                    copy.iconAction = undefined;\n                    copy.nextAction = undefined;\n                    copy.category = \"empty\";\n                    \n                    // Remove \"old\" item\n                    scope.seedTrayState.splice(index,1);\n                    // Push the copy\n                    scope.seedTrayState.push(copy);\n\n                    scope.send({seedTrayState: scope.seedTrayState});\n                    \n                }\n                \n                if (item.nextAction === \"harvest\") {\n                    \n                    var index =  scope.NFTState.indexOf(item);\n                    scope.NFTState.splice(index,1);\n                    var newItem = {\n                        column: item.column,\n                        row: item.row, \n                        category: \"empty\"\n                    }\n                    \n                    scope.NFTState.push(newItem);\n          \n                    console.log(scope.NFTState);\n                    //Update Seed Tray object \n                    scope.send({NFTState: scope.NFTState});\n                    \n                    \n                }\n            };\n        }\n    \n    });\n\n})(scope);\n\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 730,
        "y": 320,
        "wires": [
            [
                "7877fb7a.8f12d4"
            ]
        ]
    },
    {
        "id": "513fc490.e682dc",
        "type": "function",
        "z": "5e9d2991.0ea428",
        "name": "Update seed and NFT arrays",
        "func": "// If update received.\nif (msg.seedTrayState) {\n    global.set(\"crops.seedTrayState\", msg.seedTrayState);\n} \nmsg.seedTrayState = global.get(\"crops.seedTrayState\");\n\n// Get NFT state\nif (msg.NFTState) {\n    global.set(\"crops.NFT.state\", msg.NFTState);\n}\nmsg.NFTState = global.get('crops.NFT.state');\n\nif (msg.currentWeek) {\n    global.set(\"crops.currentWeek.weekNumber\", msg.currentweek[\"weekNumber\"]);\n    global.set(\"crops.currentWeek.schedule.maxSeedPerWeek\", msg.currentweek[\"schedule\"][\"maxSeedPerWeek\"]);\n    global.set(\"crops.currentWeek.schedule.countSeedPlanted\", msg.currentweek[\"schedule\"][\"countSeedPlanted\"]);\n}\n\n\n// Get all empty cells from NFT system, to assign a cell for transplantation from seed tray\nvar emptyNFTCells = msg.NFTState.filter(cell => cell.category === \"empty\");\nvar countEmptyCells = 0;\n\nvar maxNumberOfSaladSeedsPerWeek = global.get(\"crops.currentWeek.schedule.maxSeedPerWeek\");\nvar currentWeekNumber = global.get(\"crops.currentWeek.weekNumber\");\n\n\n// ---------- DATE utils -----------------\n\n// Returns the ISO week of the date.\n Date.prototype.getWeek = function() {\n    var date = new Date(this.getTime());\n    date.setHours(0, 0, 0, 0);\n    // Thursday in current week decides the year.\n    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);\n    // January 4 is always in week 1.\n    var week1 = new Date(date.getFullYear(), 0, 4);\n    // Adjust to Thursday in week 1 and count number of weeks from date to week1.\n        return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);\n};\n\nDate.prototype.isToday = function () {\n    var today = new Date();\n\n    return this.getDate() === today.getDate() &&\n        this.getMonth() === today.getMonth() &&\n        this.getFullYear() === today.getFullYear();\n};\n\n\n// Pass global varialbe\n\nmsg.lettuceDaysForGermination = global.get('crops.lettuce.schedule.germinated') || 0;\nmsg.lettuceDaysForTransplant = global.get('crops.lettuce.schedule.transplant') || 0;\nmsg.lettuceDaysForHarvest = global.get('crops.lettuce.schedule.harvest') || 0;\n\nfor (var item in msg.seedTrayState) {\n\n    // bug fix - save date as 2021-01-05T00:00:00+09:00\n \n    if (msg.seedTrayState[item][\"category\"] == \"empty\") {\n            \n        msg.seedTrayState[item][\"hexColor\"]= \"grey\";\n        msg.seedTrayState[item][\"icon\"] = \"\";\n        \n        // In case no next action defined, and seeds can be planted this week\n        if (!msg.seedTrayState[item][\"nextAction\"] &&\n            global.get(\"crops.currentWeek.schedule.countSeedPlanted\") < maxNumberOfSaladSeedsPerWeek) {\n            \n            msg.seedTrayState[item][\"nextAction\"] = \"plantSeed\";\n            msg.seedTrayState[item][\"iconAction\"] = \"http://raspberrypi.local:1880/seeding.png\";\n            \n            var numberOfSeedToPlan = global.get(\"crops.currentWeek.schedule.countSeedPlanted\");\n            global.set(\"crops.currentWeek.schedule.countSeedPlanted\", numberOfSeedToPlan+1);\n\n        }\n        \n    }\n    \n    // if curent week = transplantWeekNumber, time to transplant\n    if (currentWeekNumber >= (new Date(Date.parse(msg.seedTrayState[item][\"transplantDate\"]))).getWeek()) {\n        \n        msg.seedTrayState[item][\"hexColor\"]= \"green\";\n        msg.seedTrayState[item][\"icon\"] = \"http://raspberrypi.local:1880/germinated-state.png\";\n        \n        msg.seedTrayState[item][\"nextAction\"] = \"transplant\";\n        msg.seedTrayState[item][\"iconAction\"] = \"http://raspberrypi.local:1880/action-transplant.png\";\n        \n        // Ready to harvest, so progress is 100%\n        msg.seedTrayState[item][\"progress\"] = 100\n            \n        // Ready for transplant. Compute toBe column and row\n        if (emptyNFTCells[countEmptyCells]) {\n            msg.seedTrayState[item][\"toNFTColumn\"] = emptyNFTCells[countEmptyCells].column;\n            msg.seedTrayState[item][\"toNFTRow\"] = emptyNFTCells[countEmptyCells].row;\n            countEmptyCells++;\n        }\n    }\n    \n    // Seed is germinated, not ready for transplant\n    else if (Date.parse(msg.seedTrayState[item][\"transplantDate\"]) >= new Date().getTime()\n            && new Date().getTime() > Date.parse(msg.seedTrayState[item][\"germinationDate\"])) {\n                \n        msg.seedTrayState[item][\"hexColor\"]= \"green\";\n        msg.seedTrayState[item][\"icon\"] = \"http://raspberrypi.local:1880/germinated-state.png\";\n        \n        var daysElapsedSinceSeedDate = Math.abs((new Date().getTime() - Date.parse(msg.seedTrayState[item][\"seedPlantedDate\"])) / (1000 * 60 * 60 * 24));\n        msg.seedTrayState[item][\"progress\"]= Math.round(daysElapsedSinceSeedDate / msg.lettuceDaysForTransplant * 100);\n        if (msg.seedTrayState[item][\"progress\"] > 100) {\n            msg.seedTrayState[item][\"progress\"] = 100;\n        }\n    } \n    \n    // Germinated \n    else if (Date.parse(msg.seedTrayState[item][\"germinationDate\"]) <= new Date().getTime()\n            && new Date().getTime() > Date.parse(msg.seedTrayState[item][\"seedPlantedDate\"])) {\n        \n        msg.seedTrayState[item][\"hexColor\"]= \"green\";\n        msg.seedTrayState[item][\"icon\"] = \"http://raspberrypi.local:1880/germinating-state.png\";\n        \n        var daysElapsedSinceSeedDate = Math.abs((new Date().getTime() - Date.parse(msg.seedTrayState[item][\"seedPlantedDate\"])) / (1000 * 60 * 60 * 24));\n        msg.seedTrayState[item][\"progress\"]= Math.round(daysElapsedSinceSeedDate / msg.lettuceDaysForGermination * 100);\n        \n        if (msg.seedTrayState[item][\"progress\"] > 100) {\n            msg.seedTrayState[item][\"progress\"] = 100;\n        }\n        \n    } \n    \n    // Seed state\n    else if (msg.seedTrayState[item][\"seedPlantedDate\"] && \n            (new Date(Date.parse(msg.seedTrayState[item][\"seedPlantedDate\"]))).isToday()) {\n        \n        msg.seedTrayState[item][\"hexColor\"]= \"green\";\n        msg.seedTrayState[item][\"icon\"] = \"http://raspberrypi.local:1880/seed_state.png\";\n        \n        var daysElapsedSinceSeedDate = Math.abs((new Date().getTime() - Date.parse(msg.seedTrayState[item][\"seedPlantedDate\"])) / (1000 * 60 * 60 * 24));\n        msg.seedTrayState[item][\"progress\"]= Math.round(daysElapsedSinceSeedDate / msg.lettuceDaysForGermination * 100);\n        \n        if (msg.seedTrayState[item][\"progress\"] > 100) {\n            msg.seedTrayState[item][\"progress\"] = 100;\n        }\n    } \n}\n\nglobal.set(\"crops.seedTrayState\", msg.seedTrayState);\n\n\nfor (item in msg.NFTState) {\n  \n    if (msg.NFTState[item][\"category\"] == \"empty\") {\n            \n        msg.NFTState[item][\"hexColor\"]= \"black\";\n        msg.NFTState[item][\"icon\"] = \"\";\n        \n    } else if (currentWeekNumber >= (new Date(Date.parse(msg.NFTState[item][\"harvestDate\"]))).getWeek()) {\n        \n        msg.NFTState[item][\"hexColor\"]= \"green\";\n        msg.NFTState[item][\"icon\"] = \"http://raspberrypi.local:1880/harvest-state.png\";\n        \n        msg.NFTState[item][\"nextAction\"] = \"harvest\";\n        msg.NFTState[item][\"iconAction\"] = \"http://raspberrypi.local:1880/harvest-action.png\";\n        \n        // Ready to harvest, so progress is 100%\n        msg.NFTState[item][\"progress\"] = 100\n        \n    } else {\n\n        msg.NFTState[item][\"hexColor\"]= \"green\";\n        msg.NFTState[item][\"icon\"] = \"http://raspberrypi.local:1880/germinated-state.png\";\n        \n        var daysElapsedSinceTransplant = Math.abs((new Date().getTime() - Date.parse(msg.NFTState[item][\"transplantDate\"])) / (1000 * 60 * 60 * 24));\n        msg.NFTState[item][\"progress\"]= Math.round(daysElapsedSinceTransplant / msg.lettuceDaysForHarvest * 100);\n        \n        \n    }\n}\n\nglobal.set('crops.NFT.state', msg.NFTState);\n\n\nmsg.NFTColumns = global.get('config.NFT.columns'); \nmsg.NFTRows =global.get('config.NFT.rows'); \nmsg.SeedTrayColumns = global.get('config.SeedTray.columns'); \nmsg.SeedTrayRows = global.get('config.SeedTray.rows'); \n\nmsg.crops = { \n    \n    currentweek: {\n            weekNumber: global.get(\"crops.currentWeek.weekNumber\"),\n            schedule: {\n                maxSeedPerWeek: global.get(\"crops.currentWeek.schedule.maxSeedPerWeek\"),\n                countSeedPlanted: global.get(\"crops.currentWeek.schedule.countSeedPlanted\")\n            }\n    }\n};\n\nreturn [\n    msg,  \n    { payload: msg.seedTrayState }, \n    { payload: msg.NFTState },\n    msg.crops\n];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 300,
        "wires": [
            [
                "bd43de44.263ff",
                "91840b38.961cc8",
                "54ed5895.d86ef8"
            ],
            [
                "da2f76ad.ea7f48"
            ],
            [
                "33e86b0.ec93c96"
            ],
            []
        ]
    },
    {
        "id": "7159d445.126dcc",
        "type": "persist out",
        "z": "5e9d2991.0ea428",
        "name": "cropsState",
        "storageNode": "661a710f.63355",
        "x": 310,
        "y": 420,
        "wires": [
            [
                "513fc490.e682dc"
            ]
        ]
    },
    {
        "id": "25bfc60c.8dce1a",
        "type": "inject",
        "z": "5e9d2991.0ea428",
        "name": "DEBUG - reset seed nursary storage test",
        "props": [
            {
                "p": "seedTrayState",
                "v": "[{\"column\":\"A\",\"row\":\"1\",\"category\":\"salad\",\"seedPlantedDate\":\"2021-01-07\",\"germinationDate\":\"2021-01-07\",\"transplantDate\":\"2021-01-09\",\"harvestDate\":\"2021-02-16\"},{\"column\":\"B\",\"row\":\"1\",\"category\":\"salad\",\"seedPlantedDate\":\"2020-12-29\",\"germinationDate\":\"2021-01-03\",\"transplantDate\":\"2021-01-10\",\"harvestDate\":\"2021-02-02\"},{\"column\":\"C\",\"row\":\"1\",\"category\":\"salad\",\"seedPlantedDate\":\"2021-01-07\",\"germinationDate\":\"2021-01-09\",\"transplantDate\":\"2021-01-28\",\"harvestDate\":\"2021-02-12\"},{\"column\":\"A\",\"row\":\"2\",\"category\":\"salad\",\"seedPlantedDate\":\"2020-12-25\",\"germinationDate\":\"2021-01-08\",\"transplantDate\":\"2021-01-10\",\"harvestDate\":\"2021-02-25\"},{\"column\":\"B\",\"row\":\"2\",\"category\":\"empty\"},{\"column\":\"C\",\"row\":\"2\",\"category\":\"empty\"}]",
                "vt": "json"
            },
            {
                "p": "NFTState",
                "v": "[{\"column\":\"A\",\"row\":\"1\",\"category\":\"salad\",\"seedPlantedDate\":\"2020-12-12\",\"germinationDate\":\"2021-12-15\",\"transplantDate\":\"2021-01-01\",\"harvestDate\":\"2021-01-09\"},{\"column\":\"B\",\"row\":\"1\",\"category\":\"empty\"},{\"column\":\"C\",\"row\":\"1\",\"category\":\"salad\",\"seedPlantedDate\":\"2020-12-20\",\"germinationDate\":\"2021-01-02\",\"transplantDate\":\"2021-01-20\",\"harvestDate\":\"2021-02-15\"},{\"column\":\"D\",\"row\":\"1\",\"category\":\"empty\"},{\"column\":\"E\",\"row\":\"1\",\"category\":\"empty\"},{\"column\":\"F\",\"row\":\"1\",\"category\":\"empty\"},{\"column\":\"G\",\"row\":\"1\",\"category\":\"empty\"},{\"column\":\"H\",\"row\":\"1\",\"category\":\"empty\"},{\"column\":\"I\",\"row\":\"1\",\"category\":\"empty\"},{\"column\":\"A\",\"row\":\"2\",\"category\":\"salad\",\"seedPlantedDate\":\"2020-12-05\",\"germinationDate\":\"2020-12-07\",\"transplantDate\":\"2020-12-15\",\"harvestDate\":\"2021-01-14\"},{\"column\":\"B\",\"row\":\"2\",\"category\":\"empty\"},{\"column\":\"C\",\"row\":\"2\",\"category\":\"salad\",\"seedPlantedDate\":\"2020-12-20\",\"germinationDate\":\"2021-01-02\",\"transplantDate\":\"2021-01-08\",\"harvestDate\":\"2021-02-02\"},{\"column\":\"D\",\"row\":\"2\",\"category\":\"empty\"},{\"column\":\"E\",\"row\":\"2\",\"category\":\"empty\"},{\"column\":\"F\",\"row\":\"2\",\"category\":\"empty\"},{\"column\":\"G\",\"row\":\"2\",\"category\":\"empty\"},{\"column\":\"H\",\"row\":\"2\",\"category\":\"empty\"},{\"column\":\"I\",\"row\":\"2\",\"category\":\"empty\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 920,
        "y": 120,
        "wires": [
            [
                "7877fb7a.8f12d4"
            ]
        ]
    },
    {
        "id": "cd560ffa.729c9",
        "type": "inject",
        "z": "5e9d2991.0ea428",
        "name": "First init - Create empty arrays",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "41de6525.73d44c"
            ]
        ]
    },
    {
        "id": "54ed5895.d86ef8",
        "type": "ui_template",
        "z": "5e9d2991.0ea428",
        "group": "97fc29b5.9cfb68",
        "name": "NFT - State",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "\n  <svg height=\"{{svgHeight}}\">\n\n    <g ng-repeat=\"(key, value) in NFT\">\n      \n    <polyline points=\"{{value.x1}} {{value.y1}} {{value.x2}} {{value.y2}} \n        {{value.x3}} {{value.y3}} {{value.x4}} {{value.y4}} {{value.x5}} {{value.y5}}\" stroke=\"black\" \n      stroke-width=\"2\" stroke-linecap=\"round\" fill=\"none\" stroke-linejoin=\"round\"/>\n      \n    </g>\n    \n    <g ng-repeat=\"(key, value) in NFTState\">\n      \n        <rect x=\"{{value.xpos}}\" \n               y=\"{{value.ypos}}\"\n               width=\"{{value.width}}\" height=\"{{value.height}}\" style=\"fill:{{value.hexColor}}\" rx=\"150\" />\n    \n        <image href=\"{{value.icon}}\" x=\"{{value.xpos+value.width/4}}\" y=\"{{value.ypos+value.height/4}}\" \n          width=\"{{value.width/2}}\" height=\"{{value.height/2}}\" />\n          \n          \n        <line    \n            x1=\"{{value.progressX1}}\"\n            y1=\"{{value.progressY1}}\"\n            x2=\"{{value.progressXMax}}\"\n            y2=\"{{value.progressY1}}\"\n            stroke=\"black\" \n            stroke-dasharray=\"100%\" \n            stroke-dashoffset=\"50%\" \n            stroke-width=\"2\" />\n            \n        <line\n            x1=\"{{value.progressX1}}\"\n            y1=\"{{value.progressY1}}\"\n            x2=\"{{value.progressX2}}\"\n            y2=\"{{value.progressY1}}\"\n            stroke=\"#C2E362\" \n            stroke-dasharray=\"100%\" \n            stroke-dashoffset=\"50%\" \n            stroke-width=\"2\" />\n      \n    </g>\n    \n    <g ng-repeat=\"(key, value) in rowsDisplay\">\n       \n       <text x=\"{{value.xpos}}\" y=\"{{value.ypos}}\" dominant-baseline=\"central\" text-anchor=\"middle\"\n            font-size=\"14\" stroke-width=\"0\" stroke=\"#000\"\n            fill=\"#f9fcfb\" font-family=\"Montserrat\" font-weight=\"bold\">{{value.title}}</text>\n    </g>\n    \n    <g ng-repeat=\"(key, value) in columnsDisplay\">\n       \n       <text x=\"{{value.xpos}}\" y=\"{{value.ypos}}\" dominant-baseline=\"central\" text-anchor=\"middle\"\n            font-size=\"14\" stroke-width=\"0\" stroke=\"#000\"\n            fill=\"#f9fcfb\" font-family=\"Montserrat\" font-weight=\"bold\">{{value.title}}</text>\n    </g>\n    \n\n  </svg>\n  \n\n\n<script>\n    \n(function(scope) {\n    \n    scope.rowsDisplay = []; \n    scope.columnsDisplay = []; \n    \n    // $watch fires each time the node is triggered in the flow\n    scope.$watch('msg', function(msg) {\n        \n        scope.NFTState = msg.NFTState;\n\n        var boxWidth = 40, boxHeight = 40;\n        var topPadding = 5;\n        var leftPadding = 40;\n        var boxSpacing = 5;\n        var rowSpacing = 15;\n        \n        var numberofRows = msg.NFTRows;\n        var numberofColumns = msg.NFTColumns; \n        \n        scope.svgHeight = (topPadding+boxHeight) + (numberofRows * (boxHeight+rowSpacing) * 1.2) + \"px\";\n        \n        scope.NFT = [];\n        var NFTpadding = 3;\n        \n        for (i = 1 ; i <= numberofRows ; i++) {\n            var item = {\n                x1: leftPadding - NFTpadding,\n                y1: topPadding + boxHeight*i + rowSpacing*i - NFTpadding,\n                x2: leftPadding+(numberofColumns) * boxWidth + boxSpacing*(numberofColumns) + NFTpadding,\n                y2: topPadding + boxHeight*i + rowSpacing*i - NFTpadding,\n                x3: leftPadding+(numberofColumns) * boxWidth + boxSpacing*(numberofColumns) + NFTpadding,\n                y3: topPadding + boxHeight*(i+1) + rowSpacing*i + NFTpadding,\n                x4: leftPadding - NFTpadding,\n                y4: topPadding + boxHeight*(i+1) + rowSpacing*i + NFTpadding,\n                x5: leftPadding - NFTpadding,\n                y5: topPadding + boxHeight*i + rowSpacing*i - NFTpadding\n            }\n            scope.NFT.push(item);\n        }\n        \n        angular.forEach(scope.NFTState, function (value, key) {\n            value[\"xpos\"] = (value[\"column\"].toLowerCase().charCodeAt(0) - 97) * boxHeight + (value[\"column\"].toLowerCase().charCodeAt(0) - 97) * boxSpacing + leftPadding;\n            value[\"ypos\"] = value[\"row\"] * boxWidth + value[\"row\"] * rowSpacing + topPadding;\n            value[\"width\"] = boxWidth; \n            value[\"height\"]= boxHeight; \n            \n            if (value[\"progress\"]) { \n                \n                value[\"progressX1\"] = Math.floor((value[\"column\"].toLowerCase().charCodeAt(0) - 97) * boxHeight + (value[\"column\"].toLowerCase().charCodeAt(0) - 97) * boxSpacing + leftPadding + boxWidth/3);\n                value[\"progressY1\"] = Math.floor(value[\"row\"] * boxWidth + value[\"row\"] * rowSpacing + topPadding + boxHeight / 1.2);\n                // Max - + 20px\n                value[\"progressXMax\"] = Math.floor((value[\"column\"].toLowerCase().charCodeAt(0) - 97) * boxHeight + (value[\"column\"].toLowerCase().charCodeAt(0) - 97) * boxSpacing + leftPadding + boxWidth/3 + (boxWidth / 3)); \n                // Prograss bar - 0.2 * % progress (100% = 20px)\n                value[\"progressX2\"] = Math.floor((value[\"column\"].toLowerCase().charCodeAt(0) - 97) * boxHeight + (value[\"column\"].toLowerCase().charCodeAt(0) - 97) * boxSpacing + leftPadding +  boxWidth/3 + (boxWidth / 3 / 100) * value[\"progress\"]);\n            }\n            \n        });\n\n        \n        scope.rowsDisplay = []; \n        for ( i = 0 ; i < numberofRows ; i++) {\n            var feed = {\n                \"title\": i+1,\n                \"xpos\": leftPadding/2,\n                \"ypos\": topPadding + (i+1) * boxHeight + (i+1) * rowSpacing + boxHeight/2\n            }\n            scope.rowsDisplay.push(feed);\n        }\n        \n        scope.columnsDisplay = []; \n        for ( i = 0 ; i < numberofColumns ; i++) {\n            var feed = {\n                \"title\": String.fromCharCode(97 + i).toUpperCase(),\n                \"xpos\": leftPadding + (i) * boxWidth + (i) * boxSpacing + boxWidth/2,\n                \"ypos\": topPadding/0.2\n            }\n            scope.columnsDisplay.push(feed);\n        }\n\n        \n    });\n\n})(scope);\n\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 710,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7877fb7a.8f12d4",
        "type": "function",
        "z": "5e9d2991.0ea428",
        "name": "Save seedTray&NFT state and weekly data",
        "func": "\nvar newMsg = {};\n\nif (msg.seedTrayState) {\n    newMsg.seedTrayState = msg.seedTrayState;\n    global.set(\"crops.seedTrayState\", msg.seedTrayState);\n} else {\n    newMsg.seedTrayState = global.get(\"crops.seedTrayState\");\n}\n\nif (msg.NFTState) {\n    newMsg.NFTState = msg.NFTState;\n    global.set(\"crops.NFT.state\", msg.NFTState);\n} else {\n    newMsg.NFTState =  global.get(\"crops.NFT.state\");\n}\n\n// Workaround -- keep saving this\nnewMsg.crops = { \n    \n    currentweek: {\n            weekNumber: global.get(\"crops.currentWeek.weekNumber\"),\n            schedule: {\n                maxSeedPerWeek: global.get(\"crops.currentWeek.schedule.maxSeedPerWeek\"),\n                countSeedPlanted: global.get(\"crops.currentWeek.schedule.countSeedPlanted\")\n            }\n    }\n};\n\n\nreturn newMsg;\n        ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 320,
        "wires": [
            [
                "affd3061.6c4e4",
                "35eb65db.60721a",
                "eedd17fa.7bc4f8"
            ]
        ]
    },
    {
        "id": "91840b38.961cc8",
        "type": "ui_template",
        "z": "5e9d2991.0ea428",
        "group": "b014bc36.c80c9",
        "name": "Seed tray - crops planning",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "\n  <svg width=\"384px\" height=\"200px\">\n\n    <g ng-repeat=\"(key, value) in seedTrayState\">\n      \n      <rect x=\"{{value.xpos}}\" \n           y=\"{{value.ypos}}\"\n           width=\"{{value.width}}\" height=\"{{value.height}}\" style=\"fill:{{value.hexColor}}\" rx=\"10\" />\n\n      <image href=\"{{value.icon}}\" x=\"{{value.xpos+value.width/4}}\" y=\"{{value.ypos+value.height/4}}\" \n      width=\"{{value.width/2}}\" height=\"{{value.height/2}}\" />\n      \n       <line    \n            x1=\"{{value.progressX1}}\"\n            y1=\"{{value.progressY1}}\"\n            x2=\"{{value.progressXMax}}\"\n            y2=\"{{value.progressY1}}\"\n            stroke=\"black\" \n            stroke-dasharray=\"100%\" \n            stroke-dashoffset=\"50%\" \n            stroke-width=\"2\" />\n            \n        <line\n            x1=\"{{value.progressX1}}\"\n            y1=\"{{value.progressY1}}\"\n            x2=\"{{value.progressX2}}\"\n            y2=\"{{value.progressY1}}\"\n            stroke=\"#C2E362\" \n            stroke-dasharray=\"100%\" \n            stroke-dashoffset=\"50%\" \n            stroke-width=\"2\" />\n            \n    </g>\n    \n    <g ng-repeat=\"(key, value) in rowsDisplay\">\n       \n       <text x=\"{{value.xpos}}\" y=\"{{value.ypos}}\" dominant-baseline=\"central\" text-anchor=\"middle\"\n            font-size=\"14\" stroke-width=\"0\" stroke=\"#000\"\n            fill=\"#f9fcfb\" font-family=\"Montserrat\" font-weight=\"bold\">{{value.title}}</text>\n    </g>\n    \n    <g ng-repeat=\"(key, value) in columnsDisplay\">\n       \n       <text x=\"{{value.xpos}}\" y=\"{{value.ypos}}\" dominant-baseline=\"central\" text-anchor=\"middle\"\n            font-size=\"14\" stroke-width=\"0\" stroke=\"#000\"\n            fill=\"#f9fcfb\" font-family=\"Montserrat\" font-weight=\"bold\">{{value.title}}</text>\n    </g>\n    \n\n  </svg>\n  \n   <svg height=\"45px\">\n       \n       <circle cx=\"62\" cy=\"22\" r=\"12\" stroke=\"green\" stroke-width=\"3\" fill=\"green\"></circle>\n       <image href=\"http://raspberrypi.local:1880/seed_state.png\" x=\"50\" y=\"10\" width=\"20\" height=\"20\" />\n       <text x=\"80\" y=\"28\" font-family=\"Roboto\" fill=\"#f9fcfb\">Seed</text>\n       \n        <circle cx=\"135\" cy=\"22\" r=\"12\" stroke=\"green\" stroke-width=\"3\" fill=\"green\"></circle>\n       <image href=\"http://raspberrypi.local:1880/germinating-state.png\" x=\"125\" y=\"10\" width=\"20\" height=\"20\" />\n       <text x=\"155\" y=\"28\" font-family=\"Roboto\" fill=\"#f9fcfb\">Germinated</text>\n        \n      <circle cx=\"254\" cy=\"22\" r=\"12\" stroke=\"green\" stroke-width=\"3\" fill=\"green\"></circle>\n      <image href=\"http://raspberrypi.local:1880/germinated-state.png\" x=\"242\" y=\"10\" width=\"20\" height=\"20\"></image>\n      <text x=\"275\" y=\"28\" font-family=\"Roboto\" fill=\"#f9fcfb\">Growing</text>\n      \n   </svg>\n  \n\n<script>\n    \n(function(scope) {\n    \n    scope.rowsDisplay = []; \n    scope.columnsDisplay = []; \n    \n    // $watch fires each time the node is triggered in the flow\n    scope.$watch('msg', function(msg) {\n        \n        scope.seedTrayState = msg.seedTrayState;\n        \n        var boxWidth = 40, boxHeight = 40;\n        var leftPadding = 25;\n        var boxSpacing = 5;\n        var topPadding = 5;\n        \n        var numberofRows = msg.SeedTrayRows;\n        var numberofColumns = msg.SeedTrayColumns; \n        \n        \n        angular.forEach(scope.seedTrayState, function (value, key) {\n            value[\"xpos\"] = (value[\"column\"].toLowerCase().charCodeAt(0) - 96) * boxHeight + (value[\"column\"].toLowerCase().charCodeAt(0) - 96) * boxSpacing + leftPadding;\n            value[\"ypos\"] = value[\"row\"] * boxWidth + value[\"row\"] * boxSpacing + topPadding;\n            value[\"width\"] = boxWidth; \n            value[\"height\"]= boxHeight; \n            \n            if (typeof value[\"progress\"] != 'undefined' || value[\"progress\"] != null) { \n                \n                value[\"progressX1\"] = Math.floor((value[\"column\"].toLowerCase().charCodeAt(0) - 96) * boxHeight + (value[\"column\"].toLowerCase().charCodeAt(0) - 96) * boxSpacing + leftPadding + boxWidth/4);\n                value[\"progressY1\"] = Math.floor(value[\"row\"] * boxWidth + value[\"row\"] * boxSpacing + topPadding + boxHeight / 1.15);\n                // Max - + 20px\n                value[\"progressXMax\"] = Math.floor((value[\"column\"].toLowerCase().charCodeAt(0) - 96) * boxHeight + (value[\"column\"].toLowerCase().charCodeAt(0) - 96) * boxSpacing + leftPadding + boxWidth/4 + (boxWidth / 2)); \n                // Prograss bar - 0.2 * % progress (100% = 20px)\n                value[\"progressX2\"] = Math.floor((value[\"column\"].toLowerCase().charCodeAt(0) - 96) * boxHeight + (value[\"column\"].toLowerCase().charCodeAt(0) - 96) * boxSpacing + leftPadding +  boxWidth/4 + (boxWidth / 2 / 100) * value[\"progress\"]);\n            }\n            \n            \n        });\n        \n        \n        scope.rowsDisplay = []; \n        for ( i = 0 ; i < numberofRows ; i++) {\n            var feed = {\n                \"title\": i+1,\n                \"xpos\": leftPadding/0.65,\n                \"ypos\": topPadding + (i+1) * boxHeight + (i+1) * boxSpacing + boxHeight/2\n            }\n            scope.rowsDisplay.push(feed);\n        }\n        \n        scope.columnsDisplay = []; \n        for ( i = 0 ; i < numberofColumns ; i++) {\n            var feed = {\n                \"title\": String.fromCharCode(97 + i).toUpperCase(),\n                \"xpos\": leftPadding + (i+1) * boxWidth + (i+1) * boxSpacing + boxWidth/2,\n                \"ypos\": topPadding/0.2\n            }\n            scope.columnsDisplay.push(feed);\n        }\n      \n    });\n\n})(scope);\n\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 760,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "a99650ab.1090c",
        "type": "inject",
        "z": "5e9d2991.0ea428",
        "name": "Initialize weekly activities",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * 1",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "4157acf6.4a66e4"
            ]
        ]
    },
    {
        "id": "4157acf6.4a66e4",
        "type": "function",
        "z": "5e9d2991.0ea428",
        "name": "Reset weelkly configuration",
        "func": "// Returns the ISO week of the date.\n        Date.prototype.getWeek = function() {\n          var date = new Date(this.getTime());\n          date.setHours(0, 0, 0, 0);\n          // Thursday in current week decides the year.\n          date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);\n          // January 4 is always in week 1.\n          var week1 = new Date(date.getFullYear(), 0, 4);\n          // Adjust to Thursday in week 1 and count number of weeks from date to week1.\n          return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);\n}\n\nvar NFTSystemSize = global.get('config.NFT.columns') * global.get('config.NFT.rows');\nvar maxNumberOfSaladSeedsPerWeek = \n        Math.floor(NFTSystemSize / (global.get(\"crops.lettuce.schedule.harvest\") / 7));\n\n\n\n\nmsg.crops = { \n    \n    currentweek: {\n            weekNumber: new Date(Date.now()).getWeek(),\n            schedule: {\n                maxSeedPerWeek: maxNumberOfSaladSeedsPerWeek,\n                countSeedPlanted: 0\n            }\n    }\n};\n\n\nglobal.set(\"crops.currentWeek.weekNumber\", msg.crops[\"currentweek\"][\"weekNumber\"]);\nglobal.set(\"crops.currentWeek.schedule.maxSeedPerWeek\", msg.crops[\"currentweek\"][\"schedule\"][\"maxSeedPerWeek\"]);\nglobal.set(\"crops.currentWeek.schedule.countSeedPlanted\", msg.crops[\"currentweek\"][\"schedule\"][\"countSeedPlanted\"]);\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "7877fb7a.8f12d4"
            ]
        ]
    },
    {
        "id": "affd3061.6c4e4",
        "type": "delay",
        "z": "5e9d2991.0ea428",
        "name": "Small delay - time to persist",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1340,
        "y": 380,
        "wires": [
            [
                "7159d445.126dcc"
            ]
        ]
    },
    {
        "id": "6e0304d5.2bddbc",
        "type": "inject",
        "z": "5e9d2991.0ea428",
        "d": true,
        "name": "Init call",
        "props": [
            {
                "p": "timestampt",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "7159d445.126dcc"
            ]
        ]
    },
    {
        "id": "da2f76ad.ea7f48",
        "type": "ui_table",
        "z": "5e9d2991.0ea428",
        "group": "2a85ce84.fe1902",
        "name": "Seed details table",
        "order": 1,
        "width": 10,
        "height": 6,
        "columns": [
            {
                "field": "column",
                "title": "Column",
                "width": "5px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "row",
                "title": "Row",
                "width": "5px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "category",
                "title": "Type",
                "width": "11px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "seedPlantedDate",
                "title": "Seed date",
                "width": "22px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "transplantDate",
                "title": "Transplant",
                "width": "22px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "icon",
                "title": "Icon",
                "width": "10px",
                "align": "center",
                "formatter": "image",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "progress",
                "title": "Progress",
                "width": "17px",
                "align": "left",
                "formatter": "progress",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 730,
        "y": 380,
        "wires": []
    },
    {
        "id": "33e86b0.ec93c96",
        "type": "ui_table",
        "z": "5e9d2991.0ea428",
        "group": "4a4c281c.1c1c58",
        "name": "NFT List",
        "order": 1,
        "width": 8,
        "height": 10,
        "columns": [
            {
                "field": "column",
                "title": "Column",
                "width": "5px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "row",
                "title": "Row",
                "width": "5px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "category",
                "title": "Type",
                "width": "14px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "harvestDate",
                "title": "Harvest",
                "width": "25px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "icon",
                "title": "Icon",
                "width": "10px",
                "align": "center",
                "formatter": "image",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "progress",
                "title": "Progress",
                "width": "25px",
                "align": "left",
                "formatter": "progress",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 700,
        "y": 420,
        "wires": []
    },
    {
        "id": "397d1372.7496bc",
        "type": "ui_ui_control",
        "z": "5e9d2991.0ea428",
        "name": "on tab change",
        "events": "all",
        "x": 80,
        "y": 420,
        "wires": [
            [
                "7159d445.126dcc"
            ]
        ]
    },
    {
        "id": "35eb65db.60721a",
        "type": "persist in",
        "z": "5e9d2991.0ea428",
        "name": "cropsState",
        "storageNode": "661a710f.63355",
        "x": 1310,
        "y": 240,
        "wires": []
    },
    {
        "id": "41de6525.73d44c",
        "type": "function",
        "z": "5e9d2991.0ea428",
        "name": "create SeedTray and NFT arrays",
        "func": "// TODO add a if and run only when global is empty (first initial init)\n\nvar NFTcolumns = global.get('config.NFT.columns'); \nvar NFTrows = global.get('config.NFT.rows'); \n\nvar SeedTrayColumns = global.get('config.SeedTray.columns'); \nvar SeedTrayRows = global.get('config.SeedTray.rows'); \n\nmsg.seedTrayState = [];\nmsg.NFTState = [];\n\nfor (var i = 1 ; i <= SeedTrayColumns ; i++) {\n    for (var j = 1 ; j <= SeedTrayRows ; j++) {\n        var item = {\n            \"column\": String.fromCharCode(64 + i),\n            \"row\": j,\n            \"category\": \"empty\"\n        };\n        msg.seedTrayState.push(item);\n    }\n}\n\nfor (var x = 1 ; x <= NFTcolumns ; x++) {\n    for (var y = 1 ; y <= NFTrows ; y++) {\n        var item = {\n            \"column\": String.fromCharCode(64 + x),\n            \"row\": y,\n            \"category\": \"empty\"\n        };\n        msg.NFTState.push(item);\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 140,
        "wires": [
            [
                "7877fb7a.8f12d4"
            ]
        ]
    },
    {
        "id": "eedd17fa.7bc4f8",
        "type": "debug",
        "z": "5e9d2991.0ea428",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 320,
        "wires": []
    },
    {
        "id": "f0a357d5.2aff68",
        "type": "comment",
        "z": "1d22c714.e50369",
        "name": "Compute time start of LED, based on sunrise/sunset",
        "info": "",
        "x": 330,
        "y": 1994,
        "wires": []
    },
    {
        "id": "dbbbfdb2.44fe2",
        "type": "ads1x15-raspi",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "property": "payload",
        "name": "",
        "chip": "IC_ADS1115",
        "i2c_address": "ADDRESS_0x48",
        "channel": "CHANNEL_0",
        "samplesPerSecond0": "SPS_920",
        "samplesPerSecond1": "SPS_8",
        "progGainAmp": "PGA_4_096V",
        "x": 520,
        "y": 560,
        "wires": [
            [
                "1de17954.4d8a97",
                "f22d3547.8edd78"
            ]
        ]
    },
    {
        "id": "34a30d8d.5cf552",
        "type": "inject",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 560,
        "wires": [
            [
                "c21651f8.1777",
                "839e7131.1b0c9"
            ]
        ]
    },
    {
        "id": "1de17954.4d8a97",
        "type": "function",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "name": "Convert Voltage to ppm",
        "func": "var isWaterPumpActivated = global.get(\"settings.water_pump.activated\");\n\nvar waterTemperature = global.get(\"seedTray.water.temperature\") || 20;\n\nvar voltage = msg.payload[\"ADS1115 • I2C_ADDRESS_0x48 • Channel A0-GND • Voltage\"];\nvar compensationCoefficient = 1.0+0.02*(waterTemperature-25.0);    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));\n//var compensationVoltage=voltage/compensationCoefficient;  //temperature compensation\\\nvar compensationVoltage = voltage;\nmsg.tdsValue=(133.42*compensationVoltage*compensationVoltage*compensationVoltage - 255.86*compensationVoltage*compensationVoltage + 857.39*compensationVoltage)*0.5; //convert voltage value to tds value\n\nif (isWaterPumpActivated != 1) {\n    \n    var waterQualityMsg = { \n        payload: msg.tdsValue,\n        waterTemp: waterTemperature,\n        voltage: voltage\n    };\n    \n    \n    return  waterQualityMsg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 730,
        "y": 560,
        "wires": [
            [
                "b2d124cc.ae5b18",
                "6a5ac7a1.e350c8",
                "39bf6628.85f8ba"
            ]
        ]
    },
    {
        "id": "cece987b.0169b8",
        "type": "function",
        "z": "1d22c714.e50369",
        "name": "Save to global ",
        "func": "global.set('seedTray.water.temperature', msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "c21651f8.1777",
        "type": "rpi-gpio out",
        "z": "1d22c714.e50369",
        "d": true,
        "g": "c2cc2f7f.c6192",
        "name": "Power on TDS meter",
        "pin": "7",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 480,
        "y": 494,
        "wires": []
    },
    {
        "id": "839e7131.1b0c9",
        "type": "delay",
        "z": "1d22c714.e50369",
        "g": "c2cc2f7f.c6192",
        "name": "2s",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 370,
        "y": 560,
        "wires": [
            [
                "dbbbfdb2.44fe2"
            ]
        ]
    },
    {
        "id": "f22d3547.8edd78",
        "type": "rpi-gpio out",
        "z": "1d22c714.e50369",
        "d": true,
        "g": "c2cc2f7f.c6192",
        "name": "Power off TDS meter",
        "pin": "7",
        "set": false,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 700,
        "y": 640,
        "wires": []
    },
    {
        "id": "3db55298.70f37e",
        "type": "inject",
        "z": "5127740.f28848c",
        "g": "8e57852f.2718a8",
        "name": "Regularly check water level, seed tray",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 640,
        "wires": [
            [
                "d5c862b.d3e0ba"
            ]
        ]
    },
    {
        "id": "4a15ab80.153564",
        "type": "link out",
        "z": "5127740.f28848c",
        "g": "3cd27958.a703b6",
        "name": "Switch on nutriment pump",
        "links": [
            "4c8ae515.b1a41c",
            "46eef45e.b4cddc"
        ],
        "x": 815,
        "y": 520,
        "wires": []
    },
    {
        "id": "4c8ae515.b1a41c",
        "type": "link in",
        "z": "87cb301d.9893c",
        "name": "Switch on nutriment A",
        "links": [
            "4a15ab80.153564"
        ],
        "x": 75,
        "y": 820,
        "wires": [
            [
                "5815b5d8.9c8fec",
                "40307feb.c7c24"
            ]
        ]
    },
    {
        "id": "5815b5d8.9c8fec",
        "type": "change",
        "z": "87cb301d.9893c",
        "name": "Switch to on",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 660,
        "wires": [
            [
                "648ce0a1.8a9de"
            ]
        ]
    },
    {
        "id": "40307feb.c7c24",
        "type": "change",
        "z": "87cb301d.9893c",
        "name": "Switch to on",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 940,
        "wires": [
            [
                "d977f79c.7973f8"
            ]
        ]
    },
    {
        "id": "69d27d4f.253984",
        "type": "change",
        "z": "87cb301d.9893c",
        "name": "Switch to on",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 428,
        "wires": [
            [
                "933e05f4.0abbb8"
            ]
        ]
    },
    {
        "id": "cd5e7336.53f74",
        "type": "link in",
        "z": "87cb301d.9893c",
        "name": "Switch on water pump",
        "links": [
            "983a3abc.dd1b18"
        ],
        "x": 295,
        "y": 428,
        "wires": [
            [
                "69d27d4f.253984"
            ]
        ]
    },
    {
        "id": "6fd97e66.02fde",
        "type": "change",
        "z": "87cb301d.9893c",
        "name": "Switch to off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 488,
        "wires": [
            [
                "933e05f4.0abbb8"
            ]
        ]
    },
    {
        "id": "83c9cbe9.ff0f68",
        "type": "link in",
        "z": "87cb301d.9893c",
        "name": "Switch off water pump",
        "links": [
            "541ca6e4.306648",
            "2d32f6d2.b52eaa",
            "6bd46816.3f5cd8"
        ],
        "x": 295,
        "y": 488,
        "wires": [
            [
                "6fd97e66.02fde"
            ]
        ]
    },
    {
        "id": "4cd08412.d9249c",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Set static system variables",
        "func": "global.set('seedTray.water.level.threshold.low', 40);\nglobal.set('seedTray.water.level.threshold.high', 85);\n\nglobal.set('config.peristaltic.flow', 2); // flow in mL / sec\n\n\nglobal.set('color.warning', \"#CC3300\");\nglobal.set('color.widget.water', \"#0077be\");\nglobal.set('color.widget.light.led', \"#ffc30b\");\nglobal.set('color.widget.nutrients', \"#bb86fc\");\nglobal.set('color.widget.ph', \"\");\n\n\nglobal.set('config.NFT.columns', 9); \nglobal.set('config.NFT.rows', 4); \nglobal.set('config.SeedTray.columns', 3); \nglobal.set('config.SeedTray.rows', 3); \n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a044bc3b.eaaab",
        "type": "inject",
        "z": "9441712c.a6198",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 180,
        "wires": [
            [
                "4cd08412.d9249c"
            ]
        ]
    },
    {
        "id": "53182f75.3ca53",
        "type": "comment",
        "z": "1d22c714.e50369",
        "name": "## Seed tray - water spray",
        "info": "",
        "x": 250,
        "y": 2274,
        "wires": []
    },
    {
        "id": "d579d391.622e6",
        "type": "switch",
        "z": "87cb301d.9893c",
        "name": "When water pump is on",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 520,
        "wires": [
            [
                "1426c687.455629"
            ]
        ]
    },
    {
        "id": "1426c687.455629",
        "type": "persist out",
        "z": "87cb301d.9893c",
        "name": "waterPumpTimer",
        "storageNode": "217cc961.603ce6",
        "x": 1070,
        "y": 520,
        "wires": [
            [
                "fcfbe87b.4c3f98"
            ]
        ]
    },
    {
        "id": "fcfbe87b.4c3f98",
        "type": "function",
        "z": "87cb301d.9893c",
        "name": "msg.delay",
        "func": "var newMsg = { delay: (msg.payload * 1000) };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1270,
        "y": 520,
        "wires": [
            [
                "766d6f3d.e9fdb"
            ]
        ]
    },
    {
        "id": "766d6f3d.e9fdb",
        "type": "delay",
        "z": "87cb301d.9893c",
        "name": "",
        "pauseType": "delayv",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1440,
        "y": 520,
        "wires": [
            [
                "2d32f6d2.b52eaa"
            ]
        ]
    },
    {
        "id": "2d32f6d2.b52eaa",
        "type": "link out",
        "z": "87cb301d.9893c",
        "name": "",
        "links": [
            "83c9cbe9.ff0f68"
        ],
        "x": 1535,
        "y": 520,
        "wires": []
    },
    {
        "id": "fd56b7bd.4166d8",
        "type": "ui_slider",
        "z": "9441712c.a6198",
        "name": "Water pump duration",
        "label": "<i class=\"fa fa-clock-o\"></i>",
        "tooltip": "Water pump duration",
        "group": "1c4b8cb2.e1e2e3",
        "order": 26,
        "width": 4,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": "0",
        "max": "180",
        "step": "30",
        "x": 480,
        "y": 1020,
        "wires": [
            [
                "16d52aef.57d3a5",
                "bee922ab.16ab5",
                "34cdfb3a.ae8094",
                "88e72de5.1224f"
            ]
        ]
    },
    {
        "id": "16d52aef.57d3a5",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "1c4b8cb2.e1e2e3",
        "order": 27,
        "width": 1,
        "height": 1,
        "name": "Water pump duration ",
        "label": "",
        "format": "{{msg.payload}} sec.",
        "layout": "row-center",
        "x": 720,
        "y": 1001,
        "wires": []
    },
    {
        "id": "bee922ab.16ab5",
        "type": "function",
        "z": "9441712c.a6198",
        "name": "Save global variable",
        "func": "\nglobal.set('settings.water_pump.duration',msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 1041,
        "wires": [
            []
        ]
    },
    {
        "id": "34cdfb3a.ae8094",
        "type": "persist in",
        "z": "9441712c.a6198",
        "name": "waterPumpTimer",
        "storageNode": "217cc961.603ce6",
        "x": 710,
        "y": 1081,
        "wires": []
    },
    {
        "id": "4e676d89.397a94",
        "type": "persist out",
        "z": "9441712c.a6198",
        "name": "waterPumpTimer",
        "storageNode": "217cc961.603ce6",
        "x": 270,
        "y": 1020,
        "wires": [
            [
                "fd56b7bd.4166d8"
            ]
        ]
    },
    {
        "id": "88e72de5.1224f",
        "type": "link out",
        "z": "9441712c.a6198",
        "name": "Water spray duration update",
        "links": [
            "593527d0.c1f528"
        ],
        "x": 635,
        "y": 961,
        "wires": []
    },
    {
        "id": "d2b87228.9de9d",
        "type": "ui_text",
        "z": "9441712c.a6198",
        "group": "1c4b8cb2.e1e2e3",
        "order": 24,
        "width": 0,
        "height": 0,
        "name": "Water pump setting",
        "label": "<b><i class=\"fa fa-sliders\"></i> Water pump </b>",
        "format": "",
        "layout": "row-left",
        "x": 250,
        "y": 960,
        "wires": []
    },
    {
        "id": "3339466d.6d58aa",
        "type": "link out",
        "z": "9441712c.a6198",
        "name": "Water spray duration update",
        "links": [],
        "x": 635,
        "y": 781,
        "wires": []
    },
    {
        "id": "d5c862b.d3e0ba",
        "type": "switch",
        "z": "5127740.f28848c",
        "g": "8e57852f.2718a8",
        "name": "If seed tray water level > 50",
        "property": "seedTray.water.level.current",
        "propertyType": "global",
        "rules": [
            {
                "t": "gte",
                "v": "50",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 600,
        "y": 640,
        "wires": [
            [
                "6bd46816.3f5cd8"
            ]
        ]
    },
    {
        "id": "6bd46816.3f5cd8",
        "type": "link out",
        "z": "5127740.f28848c",
        "g": "8e57852f.2718a8",
        "name": "Switch on nutriment pump",
        "links": [
            "83c9cbe9.ff0f68"
        ],
        "x": 775,
        "y": 640,
        "wires": []
    },
    {
        "id": "d14f13be.f71eb",
        "type": "apple-find-me",
        "z": "b2dec5c2.4f2758",
        "account": "feb8425d.ff4b4",
        "name": "Home location",
        "triggerInterval": "60000",
        "geoAPI": "OSM",
        "distanceInMeter": "150",
        "hereMapApiKey": "",
        "googleMapsApiKey": "",
        "places": [
            {
                "name": "Home",
                "lat": "35.658196156866424",
                "lon": "139.71987455770463"
            }
        ],
        "x": 380,
        "y": 320,
        "wires": [
            [
                "afc2699b.555188"
            ]
        ]
    },
    {
        "id": "c8dbc732.1ab628",
        "type": "debug",
        "z": "1d22c714.e50369",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 2034,
        "wires": []
    },
    {
        "id": "4129940e.74d48c",
        "type": "comment",
        "z": "1d22c714.e50369",
        "name": "##TODO Fix me - timer is not always set to LED",
        "info": "to reproduce - add new timers.\nSolutions - find the indice for output = \"0\"",
        "x": 980,
        "y": 2114,
        "wires": []
    },
    {
        "id": "afc2699b.555188",
        "type": "function",
        "z": "b2dec5c2.4f2758",
        "name": "Extract iPhone location",
        "func": "var location_iPhone = msg.payload.iPhone[0].locationInfo.currentPlace;\nvar newMsg = {};\nnewMsg.location_iPhone = location_iPhone;\nnewMsg.topic = \"location_iPhone\";\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 320,
        "wires": [
            [
                "f40c3a92.6bfd38"
            ]
        ]
    },
    {
        "id": "f40c3a92.6bfd38",
        "type": "switch",
        "z": "b2dec5c2.4f2758",
        "name": "Is Home?",
        "property": "location_iPhone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Home",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Home",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 820,
        "y": 320,
        "wires": [
            [
                "830f2500.757e68"
            ],
            [
                "7268094f.2cf1e8"
            ]
        ]
    },
    {
        "id": "f0bdf07d.baae8",
        "type": "change",
        "z": "b2dec5c2.4f2758",
        "name": "Switch on - Stripe led",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"operation\":\"SET\",\"dps\":20,\"set\":true}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 200,
        "wires": [
            [
                "6e1f9a7d.a10f74"
            ]
        ]
    },
    {
        "id": "7268094f.2cf1e8",
        "type": "change",
        "z": "b2dec5c2.4f2758",
        "name": "Switch off stripe led",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"operation\":\"SET\",\"dps\":20,\"set\":false}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 380,
        "wires": [
            [
                "6e1f9a7d.a10f74"
            ]
        ]
    },
    {
        "id": "6e1f9a7d.a10f74",
        "type": "tuya-smart-device",
        "z": "b2dec5c2.4f2758",
        "deviceName": "LED strip - living room",
        "deviceId": "744288502cf4323a130e",
        "deviceKey": "c4dcdb8b912b91ad",
        "x": 1460,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "2080a9c5.b03c96",
        "type": "sun events",
        "z": "b2dec5c2.4f2758",
        "testmode": false,
        "verbose": false,
        "topic": "sunEvent",
        "name": "",
        "x": 620,
        "y": 200,
        "wires": [
            [
                "104a9f01.69c951",
                "2f747044.3ba46"
            ]
        ]
    },
    {
        "id": "104a9f01.69c951",
        "type": "debug",
        "z": "b2dec5c2.4f2758",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 120,
        "wires": []
    },
    {
        "id": "830f2500.757e68",
        "type": "join",
        "z": "b2dec5c2.4f2758",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 990,
        "y": 200,
        "wires": [
            [
                "f0bdf07d.baae8",
                "5de140a8.bfbc4"
            ]
        ]
    },
    {
        "id": "2f747044.3ba46",
        "type": "switch",
        "z": "b2dec5c2.4f2758",
        "name": "If sunset starts",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sunsetStart",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 200,
        "wires": [
            [
                "830f2500.757e68"
            ]
        ]
    },
    {
        "id": "5de140a8.bfbc4",
        "type": "debug",
        "z": "b2dec5c2.4f2758",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 120,
        "wires": []
    },
    {
        "id": "367950d3.adb08",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "23",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 420,
        "wires": [
            [
                "7268094f.2cf1e8"
            ]
        ]
    },
    {
        "id": "17aafb18.e74d15",
        "type": "comment",
        "z": "b2dec5c2.4f2758",
        "name": "## Switch off after 23'00",
        "info": "",
        "x": 650,
        "y": 420,
        "wires": []
    },
    {
        "id": "78e792aa.737b4c",
        "type": "comment",
        "z": "b2dec5c2.4f2758",
        "name": "## Switch on at sunset and if im home",
        "info": "",
        "x": 970,
        "y": 160,
        "wires": []
    },
    {
        "id": "db92ec4.114d91",
        "type": "smartthings-node-onoff",
        "z": "b2dec5c2.4f2758",
        "conf": "b0151dde.26366",
        "name": "Bedroom #1",
        "device": "d7fdde5e-b646-459d-84b6-f7480a5cc123",
        "x": 800,
        "y": 580,
        "wires": [
            [
                "20e189f.91df976"
            ]
        ]
    },
    {
        "id": "91f23b22.918368",
        "type": "smartthings-node-onoff",
        "z": "b2dec5c2.4f2758",
        "conf": "b0151dde.26366",
        "name": "Bedroom #2",
        "device": "c865d0af-ad3b-47f9-a0ef-2adea22743fa",
        "x": 810,
        "y": 620,
        "wires": [
            [
                "20e189f.91df976"
            ]
        ]
    },
    {
        "id": "7557647a.76fa1c",
        "type": "smartthings-node-onoff",
        "z": "b2dec5c2.4f2758",
        "conf": "b0151dde.26366",
        "name": "Bedroom #3",
        "device": "073e57cf-e0af-4d02-807d-9cfac4f18c80",
        "x": 810,
        "y": 660,
        "wires": [
            [
                "20e189f.91df976"
            ]
        ]
    },
    {
        "id": "c94e0c39.94e5",
        "type": "smartthings-node-onoff",
        "z": "b2dec5c2.4f2758",
        "conf": "b0151dde.26366",
        "name": "Bed room lamp #4",
        "device": "be05bd6d-878b-4ea3-b674-1bd19fc3945e",
        "x": 830,
        "y": 700,
        "wires": [
            [
                "20e189f.91df976"
            ]
        ]
    },
    {
        "id": "fb8f712f.edb8b",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "name": "Switch on",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "switch",
        "payload": "{\"value\":1}",
        "payloadType": "json",
        "x": 540,
        "y": 580,
        "wires": [
            [
                "db92ec4.114d91",
                "91f23b22.918368",
                "7557647a.76fa1c",
                "c94e0c39.94e5"
            ]
        ]
    },
    {
        "id": "20e189f.91df976",
        "type": "debug",
        "z": "b2dec5c2.4f2758",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 640,
        "wires": []
    },
    {
        "id": "54dfc17f.224fb",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "name": "Switch off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "switch",
        "payload": "{\"value\":0}",
        "payloadType": "json",
        "x": 540,
        "y": 740,
        "wires": [
            [
                "db92ec4.114d91",
                "91f23b22.918368",
                "7557647a.76fa1c",
                "c94e0c39.94e5"
            ]
        ]
    },
    {
        "id": "d7959315.ce8da",
        "type": "debug",
        "z": "b2dec5c2.4f2758",
        "g": "955cda67.93f6e8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1480,
        "wires": []
    },
    {
        "id": "64af5848.7dd3f8",
        "type": "function",
        "z": "b2dec5c2.4f2758",
        "g": "90cba974.1b70f8",
        "name": "Find Scene ID",
        "func": "var scenes = flow.get(\"scenes\");\nvar scene =  msg.payload;\n\nfunction FindScene(name){\n    let index = scenes.find(o => o.name === name);\n    node.warn(index);\n    let sceneID = index.sceneID;\n    node.warn(sceneID);\n    return sceneID\n}\n\n\n\nmsg.headers = {\"Authorization\": global.get(\"SwitchBotAPI\"),\n               \"ContentType\": \"application/json; charset=utf8\"};\n                \nmsg.url = \"https://api.switch-bot.com/v1.0/scenes/\"+ FindScene(scene) +\"/execute\";\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1650,
        "y": 1640,
        "wires": [
            [
                "a4ea3e4e.edd54"
            ]
        ]
    },
    {
        "id": "e70c7826.ead9f8",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "90cba974.1b70f8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BedroomSound",
        "payloadType": "str",
        "x": 1430,
        "y": 1640,
        "wires": [
            [
                "64af5848.7dd3f8"
            ]
        ]
    },
    {
        "id": "a4ea3e4e.edd54",
        "type": "http request",
        "z": "b2dec5c2.4f2758",
        "g": "90cba974.1b70f8",
        "name": "Execute",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1870,
        "y": 1640,
        "wires": [
            [
                "487a2017.f0152"
            ]
        ]
    },
    {
        "id": "487a2017.f0152",
        "type": "debug",
        "z": "b2dec5c2.4f2758",
        "g": "90cba974.1b70f8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 1640,
        "wires": []
    },
    {
        "id": "3cb22fb4.1c60d",
        "type": "function",
        "z": "b2dec5c2.4f2758",
        "g": "ad64f484.3bd408",
        "name": "Control device White B",
        "func": "var devices = flow.get(\"devices\");\n\nvar device =  \"Hub Mini DF\"; //enter name of the device or use msg.payload \n\nfunction FindDevice(name){\n    let index = devices.find(o => o.name === name);\n    node.warn(index);\n    let deviceID = index.deviceID;\n    return deviceID\n}\nvar command = msg.payload;\n\nmsg.headers = {\"Authorization\": global.get(\"SwitchBotAPI\"),\n               \"ContentType\": \"application/json; charset=utf8\"};\n                \nmsg.url = \"https://api.switch-bot.com/v1.0/devices/\"+ FindDevice(device) +\"/commands\"\nmsg.payload = {\"command\":command,\"parameter\":\"default\",\"commandType\":\"command\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1610,
        "y": 880,
        "wires": [
            [
                "bb4b8438.9dd088"
            ]
        ]
    },
    {
        "id": "9bd57614.6bf608",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "ad64f484.3bd408",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "turnOn",
        "payloadType": "str",
        "x": 1400,
        "y": 840,
        "wires": [
            [
                "3cb22fb4.1c60d"
            ]
        ]
    },
    {
        "id": "bb4b8438.9dd088",
        "type": "http request",
        "z": "b2dec5c2.4f2758",
        "g": "ad64f484.3bd408",
        "name": "Command",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1820,
        "y": 880,
        "wires": [
            [
                "d2a78cee.1fb97"
            ]
        ]
    },
    {
        "id": "1f156a7f.f7faf6",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "ad64f484.3bd408",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "turnOff",
        "payloadType": "str",
        "x": 1400,
        "y": 880,
        "wires": [
            [
                "3cb22fb4.1c60d"
            ]
        ]
    },
    {
        "id": "d2a78cee.1fb97",
        "type": "debug",
        "z": "b2dec5c2.4f2758",
        "g": "ad64f484.3bd408",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1980,
        "y": 880,
        "wires": []
    },
    {
        "id": "8518d691.cf94f8",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "ad64f484.3bd408",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "press",
        "payloadType": "str",
        "x": 1400,
        "y": 920,
        "wires": [
            [
                "3cb22fb4.1c60d"
            ]
        ]
    },
    {
        "id": "c2fe958a.eedbe8",
        "type": "function",
        "z": "b2dec5c2.4f2758",
        "g": "82beadaa.80f9a",
        "name": "Control device Curtain",
        "func": "var devices = flow.get(\"devices\");\nvar param = msg.topic;\n\nif(param === undefined){\n    param = \"default\";\n}\n\nvar device =  \"Curtain\"; //enter name of the device or use msg.payload \n\nfunction FindDevice(name){\n    let index = devices.find(o => o.name === name);\n    node.warn(index);\n    let deviceID = index.deviceID;\n    return deviceID\n}\nvar command = msg.payload;\n\nmsg.headers = {\"Authorization\": global.get(\"SwitchBotAPI\"),\n               \"ContentType\": \"application/json; charset=utf8\"};\n                \nmsg.url = \"https://api.switch-bot.com/v1.0/devices/\"+ FindDevice(device) +\"/commands\"\nmsg.payload = {\"command\":command,\"parameter\":param,\"commandType\":\"command\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1590,
        "y": 1100,
        "wires": [
            [
                "a96301bd.0c4dd"
            ]
        ]
    },
    {
        "id": "b5c777eb.591838",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "82beadaa.80f9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "turnOn",
        "payloadType": "str",
        "x": 1400,
        "y": 1060,
        "wires": [
            [
                "c2fe958a.eedbe8"
            ]
        ]
    },
    {
        "id": "a96301bd.0c4dd",
        "type": "http request",
        "z": "b2dec5c2.4f2758",
        "g": "82beadaa.80f9a",
        "name": "Command",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1800,
        "y": 1100,
        "wires": [
            [
                "c98498a0.ef5ea8"
            ]
        ]
    },
    {
        "id": "30bba459.0efd3c",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "82beadaa.80f9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "turnOff",
        "payloadType": "str",
        "x": 1400,
        "y": 1100,
        "wires": [
            [
                "c2fe958a.eedbe8"
            ]
        ]
    },
    {
        "id": "c98498a0.ef5ea8",
        "type": "debug",
        "z": "b2dec5c2.4f2758",
        "g": "82beadaa.80f9a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1980,
        "y": 1100,
        "wires": []
    },
    {
        "id": "18996bc4.33bdb4",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "82beadaa.80f9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "0,ff,25",
        "payload": "setPosition",
        "payloadType": "str",
        "x": 1440,
        "y": 1200,
        "wires": [
            [
                "c2fe958a.eedbe8"
            ]
        ]
    },
    {
        "id": "e274d666.f02638",
        "type": "comment",
        "z": "b2dec5c2.4f2758",
        "g": "82beadaa.80f9a",
        "name": "Pos params",
        "info": "Curtain\tcommand\tsetPosition\n\n\n\"index0,mode0,postion0\"\n\n\nmode: 0 (Performance Mode), 1 (Silent Mode), ff (default mode)\npostion: 0~100 (0 means opened, 100 means closed)",
        "x": 1620,
        "y": 1160,
        "wires": []
    },
    {
        "id": "c46b3d7e.34b62",
        "type": "http request",
        "z": "b2dec5c2.4f2758",
        "g": "98e346c4.842908",
        "name": "All Devices",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 760,
        "y": 940,
        "wires": [
            [
                "af637338.5ccc6",
                "5d50c8ff.4dfa98"
            ]
        ]
    },
    {
        "id": "b92e57cb.92d5a8",
        "type": "function",
        "z": "b2dec5c2.4f2758",
        "g": "98e346c4.842908",
        "name": "Fromat URL",
        "func": "//needs authentication token stored as global variable\nglobal.set(\"SwitchBotAPI\", \"9a2cb43263932728941038c755f47bdd5112a1f42827b94ce1a8564f6c86c51c9383f7e100d208f5433c5a6f1ceebac1\");\nmsg.headers = {Authorization: global.get(\"SwitchBotAPI\")};\nmsg.url = \"https://api.switch-bot.com/v1.0/devices\";\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 940,
        "wires": [
            [
                "c46b3d7e.34b62"
            ]
        ]
    },
    {
        "id": "cee02e4.49bfad",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "98e346c4.842908",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 340,
        "y": 940,
        "wires": [
            [
                "b92e57cb.92d5a8"
            ]
        ]
    },
    {
        "id": "af637338.5ccc6",
        "type": "function",
        "z": "b2dec5c2.4f2758",
        "g": "98e346c4.842908",
        "name": "Save as flow",
        "func": "var devices = msg.payload.body.deviceList;\nvar infraredRemoteList = msg.payload.body.infraredRemoteList;\n\nnode.warn(infraredRemoteList);\n\nvar deviceList = [];\nvar infraRemoteList = [];\n\nfor( var y in devices) {\n    \n    let device = {\"type\": devices[y].deviceType,\n                  \"name\": devices[y].deviceName,\n                  \"deviceID\": devices[y].deviceId\n                 };\n    deviceList.push(device);\n} \nflow.set(\"devices\", deviceList);\n\nfor( var infra in infraredRemoteList) {\n    \n    let device = {\"remoteType\": infraredRemoteList[y].remoteType,\n                  \"deviceName\": infraredRemoteList[y].deviceName,\n                  \"deviceID\": infraredRemoteList[y].deviceId\n                 };\n    infraRemoteList.push(device);\n} \nflow.set(\"infraredRemoteList\", infraRemoteList)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "8d660f51.a75cf",
        "type": "comment",
        "z": "b2dec5c2.4f2758",
        "g": "98e346c4.842908",
        "name": "Get all devices and save as flow",
        "info": "",
        "x": 420,
        "y": 900,
        "wires": []
    },
    {
        "id": "5d50c8ff.4dfa98",
        "type": "debug",
        "z": "b2dec5c2.4f2758",
        "g": "98e346c4.842908",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 900,
        "wires": []
    },
    {
        "id": "841fa47b.903488",
        "type": "http request",
        "z": "b2dec5c2.4f2758",
        "g": "e4c51a6a.02a678",
        "name": "All Devices",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 760,
        "y": 1100,
        "wires": [
            [
                "e34e8e48.b6d52"
            ]
        ]
    },
    {
        "id": "34a7b2a9.c5d22e",
        "type": "function",
        "z": "b2dec5c2.4f2758",
        "g": "e4c51a6a.02a678",
        "name": "Fromat URL",
        "func": "//needs authentication token stored as global variable\n\nmsg.headers = {Authorization: global.get(\"SwitchBotAPI\")};\nmsg.url = \"https://api.switch-bot.com/v1.0/scenes\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "841fa47b.903488"
            ]
        ]
    },
    {
        "id": "f3a44e86.445bb",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "e4c51a6a.02a678",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 340,
        "y": 1100,
        "wires": [
            [
                "34a7b2a9.c5d22e"
            ]
        ]
    },
    {
        "id": "e34e8e48.b6d52",
        "type": "function",
        "z": "b2dec5c2.4f2758",
        "g": "e4c51a6a.02a678",
        "name": "Save as flow",
        "func": "var scenes = msg.payload.body\n\nvar sceneList = [];\n\nfor( var y in scenes) {\n    \n    let scene = { \"name\": scenes[y].sceneName,\n                  \"sceneID\": scenes[y].sceneId\n                 };\n    sceneList.push(scene);\n} \nflow.set(\"scenes\", sceneList);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "3882a851.983ef8",
        "type": "comment",
        "z": "b2dec5c2.4f2758",
        "g": "e4c51a6a.02a678",
        "name": "Get all devices and save as flow",
        "info": "",
        "x": 420,
        "y": 1060,
        "wires": []
    },
    {
        "id": "fdf6b7dc.749448",
        "type": "function",
        "z": "b2dec5c2.4f2758",
        "g": "2b4d53e1.d6e2cc",
        "name": "Get Status",
        "func": "var devices = flow.get(\"devices\");\n\nvar device =  msg.payload; //enter name of the device or use msg.payload \n\nfunction FindDevice(name){\n    let index = devices.find(o => o.name === name);\n    node.warn(index);\n    let deviceID = index.deviceID;\n    return deviceID\n}\n\nmsg.headers = {\"Authorization\": global.get(\"SwitchBotAPI\"),\n               \"ContentType\": \"application/json; charset=utf8\"};\n                \nmsg.url = \"https://api.switch-bot.com/v1.0/devices/\"+ FindDevice(device) +\"/status\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 1220,
        "wires": [
            [
                "3bfce5e7.124e4a"
            ]
        ]
    },
    {
        "id": "352d13c7.f80c1c",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "2b4d53e1.d6e2cc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hub Mini DF",
        "payloadType": "str",
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "fdf6b7dc.749448"
            ]
        ]
    },
    {
        "id": "3bfce5e7.124e4a",
        "type": "http request",
        "z": "b2dec5c2.4f2758",
        "g": "2b4d53e1.d6e2cc",
        "name": "Status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "9d34c528.2d33f8"
            ]
        ]
    },
    {
        "id": "9d34c528.2d33f8",
        "type": "debug",
        "z": "b2dec5c2.4f2758",
        "g": "2b4d53e1.d6e2cc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f34949f6.4f5bf8",
        "type": "function",
        "z": "b2dec5c2.4f2758",
        "g": "955cda67.93f6e8",
        "name": "Control device IR",
        "func": "var devices = flow.get(\"infraredRemoteList\");\nvar device =  \"Living Room Air Conditioner\"; //enter name of the device or use msg.payload \n\nvar command = msg.payload;\n\nfunction FindDevice(name){\n    let index = devices.find(o => o.deviceName === name);\n    node.warn(index);\n    let deviceID = index.deviceID;\n    return deviceID\n}\n\nvar parameter = msg.temperature + \",\" + msg.mode + \",\" + msg.fanSpeed + \",\" + msg.powerState;\nmsg.payload = {\"command\":\"setAll\",\"parameter\":parameter,\"commandType\":\"command\"};\n\n\n    \nmsg.headers = {\"Authorization\": global.get(\"SwitchBotAPI\"),\n               \"ContentType\": \"application/json; charset=utf8\"};\n                \nmsg.url = \"https://api.switch-bot.com/v1.0/devices/\"+ FindDevice(device) +\"/commands\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 1320,
        "wires": [
            [
                "d3b26d8c.5038b",
                "d7959315.ce8da"
            ]
        ]
    },
    {
        "id": "e6eadb02.180c68",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "955cda67.93f6e8",
        "name": "turnOn - 24 heater",
        "props": [
            {
                "p": "powerState",
                "v": "on",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "24",
                "vt": "str"
            },
            {
                "p": "mode",
                "v": "5",
                "vt": "str"
            },
            {
                "p": "fanSpeed",
                "v": "3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 450,
        "y": 1320,
        "wires": [
            [
                "f34949f6.4f5bf8"
            ]
        ]
    },
    {
        "id": "d3b26d8c.5038b",
        "type": "http request",
        "z": "b2dec5c2.4f2758",
        "g": "955cda67.93f6e8",
        "name": "Command",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 790,
        "y": 1380,
        "wires": [
            [
                "c8a9c695.2f5788"
            ]
        ]
    },
    {
        "id": "c8a9c695.2f5788",
        "type": "debug",
        "z": "b2dec5c2.4f2758",
        "g": "955cda67.93f6e8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1380,
        "wires": []
    },
    {
        "id": "be5bfc4f.6cdd8",
        "type": "comment",
        "z": "b2dec5c2.4f2758",
        "g": "955cda67.93f6e8",
        "name": "Custom IR",
        "info": "deviceType\tcommandType\tCommand\tcommand parameter\tDescription\n\nAll home appliance types except Others\t\"\"\tturnOn\tdefault\tevery home appliance can be turned on by default\n\nAll home appliance types except Others\tcommand\tturnOff\tdefault\tevery home appliance can be turned off by default\n\nOthers\tcustomize\t{user-defined button name}\tdefault\tall user-defined buttons must be configured with commandType=customize\nAir Conditioner\tcommand\tsetAll\t{temperature},{mode},{fan speed},{power state}\ne.g. 26,1,3,on\tthe unit of temperature is in celsius;\nmodes include 1 (auto), 2 (cool), 3 (dry), 4 (fan), 5 (heat);\nfan speed includes 1 (auto), 2 (low), 3 (medium), 4 (high);\npower state includes on and off\nTV, IPTV/Streamer, Set Top Box\tcommand\tSetChannel\t{channel number}, e.g. 15\tset the TV channel to switch to\ncommand\tvolumeAdd\tdefault\tvolume up\ncommand\tvolumeSub\tdefault\tvolume down\ncommand\tchannelAdd\tdefault\tnext channel\ncommand\tchannelSub\tdefault\tprevious channel\nDVD, Speaker\tcommand\tsetMute\tdefault\tmute/unmute\ncommand\tFastForward\tdefault\tfast forward\ncommand\tRewind\tdefault\trewind\ncommand\tNext\tdefault\tnext track\ncommand\tPrevious\tdefault\tlast track\ncommand\tPause\tdefault\tpause\ncommand\tPlay\tdefault\tplay/resume\ncommand\tStop\tdefault\tstop\nSpeaker\tcommand\tvolumeAdd\tdefault\tvolume up\ncommand\tvolumeSub\tdefault\tvolume down\nFan\tcommand\tswing\tdefault\tswing\ncommand\ttimer\tdefault\tset timer\ncommand\tlowSpeed\tdefault\tset fan speed to low\ncommand\tmiddleSpeed\tdefault\tset fan speed to medium\ncommand\thighSpeed\tdefault\tset fan speed to high\nLight\tcommand\tbrightnessUp\tdefault\tbrightness up\ncommand\tbrightnessDown\tdefault\tbrightness down\nNote: Most of the devices support turnOn or turnOff, which are case-sensitive. For infrared remote devices, when you have created customized buttons, you must set commandType to customize, otherwise the command will not work. command needs to be set to the name of the customized button.",
        "x": 620,
        "y": 1460,
        "wires": []
    },
    {
        "id": "caa373a3.3259a",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "g": "955cda67.93f6e8",
        "name": "turnOff",
        "props": [
            {
                "p": "powerState",
                "v": "off",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "26",
                "vt": "str"
            },
            {
                "p": "mode",
                "v": "5",
                "vt": "str"
            },
            {
                "p": "fanSpeed",
                "v": "3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 1380,
        "wires": [
            [
                "f34949f6.4f5bf8"
            ]
        ]
    },
    {
        "id": "edc77ee8.7d8c",
        "type": "inject",
        "z": "b2dec5c2.4f2758",
        "name": "Manual switch on",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1050,
        "y": 260,
        "wires": [
            [
                "f0bdf07d.baae8"
            ]
        ]
    },
    {
        "id": "c86dc712.4a8a48",
        "type": "debug",
        "z": "87cb301d.9893c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 420,
        "wires": []
    }
]